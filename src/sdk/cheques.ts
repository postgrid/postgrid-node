/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { chequesCreate } from "../funcs/chequesCreate.js";
import { chequesDelete } from "../funcs/chequesDelete.js";
import { chequesGet } from "../funcs/chequesGet.js";
import { chequesGetDepositReadyPdf } from "../funcs/chequesGetDepositReadyPdf.js";
import { chequesGetUrl } from "../funcs/chequesGetUrl.js";
import { chequesList } from "../funcs/chequesList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Cheques extends ClientSDK {
  /**
   * Create Cheque
   *
   * @remarks
   * Create a cheque.
   *
   * This endpoint allows you to create a new cheque with the specified details.
   *
   * If you would like to create a digitalOnly cheque, the digitalOnly object with the watermark
   * will need to be passed in. Feature is available on request, e-mail support@postgrid.com for access.
   *
   * Example request body:
   *
   * ```json
   * {
   *   "from": "contact_123",
   *   "bankAccount": "bank_123",
   *   "amount": 1000,
   *   "currencyCode": "USD",
   *   "number": 123456,
   *   "size": "us_letter",
   *   "digitalOnly": {
   *     "watermark": "VOID"
   *   }
   * }
   * ```
   */
  async create(
    request: components.ChequeCreate,
    options?: RequestOptions,
  ): Promise<components.Cheque> {
    return unwrapAsync(chequesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Cheques
   *
   * @remarks
   * Get a list of cheques.
   */
  async list(
    request: operations.ChequesListRequest,
    options?: RequestOptions,
  ): Promise<components.ChequeList> {
    return unwrapAsync(chequesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Cheque
   *
   * @remarks
   * Retrieve a cheque by ID.
   */
  async get(
    request: operations.ChequesGetRequest,
    options?: RequestOptions,
  ): Promise<components.Cheque> {
    return unwrapAsync(chequesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel Cheque
   *
   * @remarks
   * Cancel a cheque by ID. Note that this operation cannot be undone.
   */
  async delete(
    request: operations.ChequesDeleteRequest,
    options?: RequestOptions,
  ): Promise<components.Cheque> {
    return unwrapAsync(chequesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Cheque Preview
   *
   * @remarks
   * Retrieve a cheque preview URL.
   *
   * This is only available for customers with our document management addon, which offers
   * document generation and hosting capabilities. This endpoint has a much higher rate limit
   * than the regular order retrieval endpoint, so it is suitable for customer-facing use-cases.
   */
  async getUrl(
    request: operations.ChequesGetURLRequest,
    options?: RequestOptions,
  ): Promise<operations.ChequesGetURLResponseBody> {
    return unwrapAsync(chequesGetUrl(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve Cheque Deposit-Ready PDF (Digital Only)
   *
   * @remarks
   * Retrieve the deposit-ready PDF for a digital-only cheque. The endpoint can only be called by users with 'Admin' role.
   * In test mode, the preview PDF of the digitalOnly cheque and the deposit-ready PDF are the same.
   * In live mode, the deposit-ready will have the full account number.
   */
  async getDepositReadyPdf(
    request: operations.ChequesGetDepositReadyPDFRequest,
    options?: RequestOptions,
  ): Promise<components.Cheque> {
    return unwrapAsync(chequesGetDepositReadyPdf(
      this,
      request,
      options,
    ));
  }
}
