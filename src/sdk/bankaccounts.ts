/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bankAccountsCreate } from "../funcs/bankAccountsCreate.js";
import { bankAccountsDelete } from "../funcs/bankAccountsDelete.js";
import { bankAccountsGet } from "../funcs/bankAccountsGet.js";
import { bankAccountsList } from "../funcs/bankAccountsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class BankAccounts extends ClientSDK {
  /**
   * Create Bank Account
   *
   * @remarks
   * Create a bank account. A US bank account is created by setting `bankCountryCode` to `US` and providing `accountNumber` and `routingNumber`. A canadian bank account can be created by specifying `bankCountryCode` as `CA` and setting `accountNumber`, `routeNumber`, and `transitNumber` accordingly.
   *
   * You must specify _either_ `signatureImage` or `signatureText`. The image can be supplied as either a URL or a multipart file upload.
   */
  async create(
    request: components.BankAccountCreate,
    options?: RequestOptions,
  ): Promise<components.BankAccount> {
    return unwrapAsync(bankAccountsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Bank Accounts
   *
   * @remarks
   * Get a list of bank accounts.
   */
  async list(
    request: operations.BankAccountsListRequest,
    options?: RequestOptions,
  ): Promise<components.BankAccountList> {
    return unwrapAsync(bankAccountsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Bank Account
   *
   * @remarks
   * Retrieve a bank account by ID.
   */
  async get(
    request: operations.BankAccountsGetRequest,
    options?: RequestOptions,
  ): Promise<components.BankAccount> {
    return unwrapAsync(bankAccountsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Bank Account
   *
   * @remarks
   * Delete a bank account by ID. Note that this operation cannot be undone.
   */
  async delete(
    request: operations.BankAccountsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.BankAccountsDeleteResponseBody> {
    return unwrapAsync(bankAccountsDelete(
      this,
      request,
      options,
    ));
  }
}
