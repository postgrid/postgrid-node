/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { templatesCreate } from "../funcs/templatesCreate.js";
import { templatesDelete } from "../funcs/templatesDelete.js";
import { templatesGet } from "../funcs/templatesGet.js";
import { templatesList } from "../funcs/templatesList.js";
import { templatesUpdate } from "../funcs/templatesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Templates extends ClientSDK {
  /**
   * Create Template
   *
   * @remarks
   * Create a template. Note that if you want to create a template that works with our template editor, you must use our dashboard.
   */
  async create(
    request: components.TemplateCreate,
    options?: RequestOptions,
  ): Promise<components.Template> {
    return unwrapAsync(templatesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Templates
   *
   * @remarks
   * Get a list of templates.
   */
  async list(
    request: operations.TemplatesListRequest,
    options?: RequestOptions,
  ): Promise<components.TemplateList> {
    return unwrapAsync(templatesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Template
   *
   * @remarks
   * Retrieve a template by ID.
   */
  async get(
    request: operations.TemplatesGetRequest,
    options?: RequestOptions,
  ): Promise<components.Template> {
    return unwrapAsync(templatesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Template
   *
   * @remarks
   * Update a template by ID.
   */
  async update(
    request: operations.TemplatesUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.Template> {
    return unwrapAsync(templatesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Template
   *
   * @remarks
   * Delete a template by ID. Note that this operation cannot be undone.
   */
  async delete(
    request: operations.TemplatesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.TemplatesDeleteResponseBody> {
    return unwrapAsync(templatesDelete(
      this,
      request,
      options,
    ));
  }
}
