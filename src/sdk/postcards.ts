/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { postcardsCreate } from "../funcs/postcardsCreate.js";
import { postcardsDelete } from "../funcs/postcardsDelete.js";
import { postcardsGet } from "../funcs/postcardsGet.js";
import { postcardsGetUrl } from "../funcs/postcardsGetUrl.js";
import { postcardsList } from "../funcs/postcardsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Postcards extends ClientSDK {
  /**
   * Create Postcard
   *
   * @remarks
   * Create a postcard. Note that you can supply one of the following:
   * - HTML content for the front and back of the postcard
   * - A template ID for the front and back of the postcard
   * - A URL or file for a 2 page PDF where the first page is the front of the postcard and the second page is the back
   * - Upload the aforementioned PDF file via a multipart form upload request
   */
  async create(
    request: components.PostcardCreate,
    options?: RequestOptions,
  ): Promise<components.Postcard> {
    return unwrapAsync(postcardsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Postcards
   *
   * @remarks
   * Get a list of postcards.
   */
  async list(
    request: operations.PostcardsListRequest,
    options?: RequestOptions,
  ): Promise<components.PostcardList> {
    return unwrapAsync(postcardsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Postcard
   *
   * @remarks
   * Retrieve a postcard by ID.
   */
  async get(
    request: operations.PostcardsGetRequest,
    options?: RequestOptions,
  ): Promise<components.Postcard> {
    return unwrapAsync(postcardsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel Postcard
   *
   * @remarks
   * Cancel a postcard by ID. Note that this operation cannot be undone.
   */
  async delete(
    request: operations.PostcardsDeleteRequest,
    options?: RequestOptions,
  ): Promise<components.Postcard> {
    return unwrapAsync(postcardsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Postcard Preview
   *
   * @remarks
   * Retrieve a postcard preview URL.
   *
   * This is only available for customers with our document management addon, which offers
   * document generation and hosting capabilities. This endpoint has a much higher rate limit
   * than the regular order retrieval endpoint, so it is suitable for customer-facing use-cases.
   */
  async getUrl(
    request: operations.PostcardsGetURLRequest,
    options?: RequestOptions,
  ): Promise<operations.PostcardsGetURLResponseBody> {
    return unwrapAsync(postcardsGetUrl(
      this,
      request,
      options,
    ));
  }
}
