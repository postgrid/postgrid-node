/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contactsCreate } from "../funcs/contactsCreate.js";
import { contactsDelete } from "../funcs/contactsDelete.js";
import { contactsGet } from "../funcs/contactsGet.js";
import { contactsList } from "../funcs/contactsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Contacts extends ClientSDK {
  /**
   * Create Contact
   *
   * @remarks
   * Creates a contact. This will also verify the contact's address **if you create it using a live API key**. To sucessfully create a contact, either a `firstName`, a `companyName`, or both are required. You can supply both, but you **cannot** supply neither.
   *
   * You have the option to supply the entire address (except for `countryCode`) via `addressLine1`, in which case PostGrid will parse it automatically. However, this is **not guaranteed to be correct**, so we recommend passing along the structured address fields (`city`, `provinceOrState`, etc) if you have them.
   *
   * _Note that if you create a contact that has identical information to another contact, this will simply update the description of the existing contact and return it. This avoids creating duplicate contacts._
   */
  async create(
    request: components.ContactCreate,
    options?: RequestOptions,
  ): Promise<components.Contact> {
    return unwrapAsync(contactsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Contacts
   *
   * @remarks
   * Get a list of contacts.
   */
  async list(
    request: operations.ContactsListRequest,
    options?: RequestOptions,
  ): Promise<operations.ContactsListResponseBody> {
    return unwrapAsync(contactsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Contact
   *
   * @remarks
   * Retrieve a contact.
   */
  async get(
    request: operations.ContactsGetRequest,
    options?: RequestOptions,
  ): Promise<components.Contact> {
    return unwrapAsync(contactsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Contact
   *
   * @remarks
   * Delete a contact. Note that this will not affect orders that were sent to this contact.
   */
  async delete(
    request: operations.ContactsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.ContactsDeleteResponseBody> {
    return unwrapAsync(contactsDelete(
      this,
      request,
      options,
    ));
  }
}
