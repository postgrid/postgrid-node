/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { boxesCreate } from "../funcs/boxesCreate.js";
import { boxesDelete } from "../funcs/boxesDelete.js";
import { boxesGet } from "../funcs/boxesGet.js";
import { boxesList } from "../funcs/boxesList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Boxes extends ClientSDK {
  /**
   * Create Box
   *
   * @remarks
   * This endpoint allows you to create a box containing up to 100 cheques.
   * A Box is mailed to a single destination.
   *
   * To create a box. You must specify:
   * - `to`: The recipient (contact or contact ID)
   * - `from`: The sender (contact or contact ID)
   * - `cheques`: An array of cheques to go in the box
   *
   * For each cheque You must specify:
   * - `to`: The recipient (contact or contact ID)
   * - `from`: The sender (contact or contact ID)
   * - `bankAccount`: The bank account ID
   * - `amount`: The amount to be sent
   * - `number`: The cheque number
   */
  async create(
    request: components.BoxCreate,
    options?: RequestOptions,
  ): Promise<components.Box> {
    return unwrapAsync(boxesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * List Boxes
   *
   * @remarks
   * List all boxes.
   */
  async list(
    request: operations.BoxesListRequest,
    options?: RequestOptions,
  ): Promise<components.BoxList> {
    return unwrapAsync(boxesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Box
   *
   * @remarks
   * Retrieve a box by ID.
   */
  async get(
    request: operations.BoxesGetRequest,
    options?: RequestOptions,
  ): Promise<components.Box> {
    return unwrapAsync(boxesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel Box
   *
   * @remarks
   * Cancel a box by ID (cannot be undone).
   */
  async delete(
    request: operations.BoxesDeleteRequest,
    options?: RequestOptions,
  ): Promise<components.Box> {
    return unwrapAsync(boxesDelete(
      this,
      request,
      options,
    ));
  }
}
