/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const RateLimitExceededErrorObject = {
  Error: "error",
} as const;
export type RateLimitExceededErrorObject = ClosedEnum<
  typeof RateLimitExceededErrorObject
>;

export const RateLimitExceededErrorType = {
  RateLimitExceededError: "rate_limit_exceeded_error",
} as const;
export type RateLimitExceededErrorType = ClosedEnum<
  typeof RateLimitExceededErrorType
>;

export type RateLimitExceededErrorError = {
  type: RateLimitExceededErrorType;
  message: string;
};

export type RateLimitExceededErrorData = {
  object: RateLimitExceededErrorObject;
  error: RateLimitExceededErrorError;
};

export class RateLimitExceededError extends Error {
  object: RateLimitExceededErrorObject;
  error: RateLimitExceededErrorError;

  /** The original data that was passed to this error instance. */
  data$: RateLimitExceededErrorData;

  constructor(err: RateLimitExceededErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.object = err.object;
    this.error = err.error;

    this.name = "RateLimitExceededError";
  }
}

/** @internal */
export const RateLimitExceededErrorObject$inboundSchema: z.ZodNativeEnum<
  typeof RateLimitExceededErrorObject
> = z.nativeEnum(RateLimitExceededErrorObject);

/** @internal */
export const RateLimitExceededErrorObject$outboundSchema: z.ZodNativeEnum<
  typeof RateLimitExceededErrorObject
> = RateLimitExceededErrorObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitExceededErrorObject$ {
  /** @deprecated use `RateLimitExceededErrorObject$inboundSchema` instead. */
  export const inboundSchema = RateLimitExceededErrorObject$inboundSchema;
  /** @deprecated use `RateLimitExceededErrorObject$outboundSchema` instead. */
  export const outboundSchema = RateLimitExceededErrorObject$outboundSchema;
}

/** @internal */
export const RateLimitExceededErrorType$inboundSchema: z.ZodNativeEnum<
  typeof RateLimitExceededErrorType
> = z.nativeEnum(RateLimitExceededErrorType);

/** @internal */
export const RateLimitExceededErrorType$outboundSchema: z.ZodNativeEnum<
  typeof RateLimitExceededErrorType
> = RateLimitExceededErrorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitExceededErrorType$ {
  /** @deprecated use `RateLimitExceededErrorType$inboundSchema` instead. */
  export const inboundSchema = RateLimitExceededErrorType$inboundSchema;
  /** @deprecated use `RateLimitExceededErrorType$outboundSchema` instead. */
  export const outboundSchema = RateLimitExceededErrorType$outboundSchema;
}

/** @internal */
export const RateLimitExceededErrorError$inboundSchema: z.ZodType<
  RateLimitExceededErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RateLimitExceededErrorType$inboundSchema,
  message: z.string(),
});

/** @internal */
export type RateLimitExceededErrorError$Outbound = {
  type: string;
  message: string;
};

/** @internal */
export const RateLimitExceededErrorError$outboundSchema: z.ZodType<
  RateLimitExceededErrorError$Outbound,
  z.ZodTypeDef,
  RateLimitExceededErrorError
> = z.object({
  type: RateLimitExceededErrorType$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitExceededErrorError$ {
  /** @deprecated use `RateLimitExceededErrorError$inboundSchema` instead. */
  export const inboundSchema = RateLimitExceededErrorError$inboundSchema;
  /** @deprecated use `RateLimitExceededErrorError$outboundSchema` instead. */
  export const outboundSchema = RateLimitExceededErrorError$outboundSchema;
  /** @deprecated use `RateLimitExceededErrorError$Outbound` instead. */
  export type Outbound = RateLimitExceededErrorError$Outbound;
}

export function rateLimitExceededErrorErrorToJSON(
  rateLimitExceededErrorError: RateLimitExceededErrorError,
): string {
  return JSON.stringify(
    RateLimitExceededErrorError$outboundSchema.parse(
      rateLimitExceededErrorError,
    ),
  );
}

export function rateLimitExceededErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<RateLimitExceededErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RateLimitExceededErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RateLimitExceededErrorError' from JSON`,
  );
}

/** @internal */
export const RateLimitExceededError$inboundSchema: z.ZodType<
  RateLimitExceededError,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: RateLimitExceededErrorObject$inboundSchema,
  error: z.lazy(() => RateLimitExceededErrorError$inboundSchema),
})
  .transform((v) => {
    return new RateLimitExceededError(v);
  });

/** @internal */
export type RateLimitExceededError$Outbound = {
  object: string;
  error: RateLimitExceededErrorError$Outbound;
};

/** @internal */
export const RateLimitExceededError$outboundSchema: z.ZodType<
  RateLimitExceededError$Outbound,
  z.ZodTypeDef,
  RateLimitExceededError
> = z.instanceof(RateLimitExceededError)
  .transform(v => v.data$)
  .pipe(z.object({
    object: RateLimitExceededErrorObject$outboundSchema,
    error: z.lazy(() => RateLimitExceededErrorError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RateLimitExceededError$ {
  /** @deprecated use `RateLimitExceededError$inboundSchema` instead. */
  export const inboundSchema = RateLimitExceededError$inboundSchema;
  /** @deprecated use `RateLimitExceededError$outboundSchema` instead. */
  export const outboundSchema = RateLimitExceededError$outboundSchema;
  /** @deprecated use `RateLimitExceededError$Outbound` instead. */
  export type Outbound = RateLimitExceededError$Outbound;
}
