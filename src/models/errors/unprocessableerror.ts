/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const UnprocessableErrorObject = {
  Error: "error",
} as const;
export type UnprocessableErrorObject = ClosedEnum<
  typeof UnprocessableErrorObject
>;

export type UnprocessableErrorError = {
  type: string;
  message: string;
};

/**
 * This gets returned when the action you are trying to do is not possible. This could be due to any number of reasons hence why the `type` is just a string.
 */
export type UnprocessableErrorData = {
  object: UnprocessableErrorObject;
  error: UnprocessableErrorError;
};

/**
 * This gets returned when the action you are trying to do is not possible. This could be due to any number of reasons hence why the `type` is just a string.
 */
export class UnprocessableError extends Error {
  object: UnprocessableErrorObject;
  error: UnprocessableErrorError;

  /** The original data that was passed to this error instance. */
  data$: UnprocessableErrorData;

  constructor(err: UnprocessableErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.object = err.object;
    this.error = err.error;

    this.name = "UnprocessableError";
  }
}

/** @internal */
export const UnprocessableErrorObject$inboundSchema: z.ZodNativeEnum<
  typeof UnprocessableErrorObject
> = z.nativeEnum(UnprocessableErrorObject);

/** @internal */
export const UnprocessableErrorObject$outboundSchema: z.ZodNativeEnum<
  typeof UnprocessableErrorObject
> = UnprocessableErrorObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableErrorObject$ {
  /** @deprecated use `UnprocessableErrorObject$inboundSchema` instead. */
  export const inboundSchema = UnprocessableErrorObject$inboundSchema;
  /** @deprecated use `UnprocessableErrorObject$outboundSchema` instead. */
  export const outboundSchema = UnprocessableErrorObject$outboundSchema;
}

/** @internal */
export const UnprocessableErrorError$inboundSchema: z.ZodType<
  UnprocessableErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  message: z.string(),
});

/** @internal */
export type UnprocessableErrorError$Outbound = {
  type: string;
  message: string;
};

/** @internal */
export const UnprocessableErrorError$outboundSchema: z.ZodType<
  UnprocessableErrorError$Outbound,
  z.ZodTypeDef,
  UnprocessableErrorError
> = z.object({
  type: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableErrorError$ {
  /** @deprecated use `UnprocessableErrorError$inboundSchema` instead. */
  export const inboundSchema = UnprocessableErrorError$inboundSchema;
  /** @deprecated use `UnprocessableErrorError$outboundSchema` instead. */
  export const outboundSchema = UnprocessableErrorError$outboundSchema;
  /** @deprecated use `UnprocessableErrorError$Outbound` instead. */
  export type Outbound = UnprocessableErrorError$Outbound;
}

export function unprocessableErrorErrorToJSON(
  unprocessableErrorError: UnprocessableErrorError,
): string {
  return JSON.stringify(
    UnprocessableErrorError$outboundSchema.parse(unprocessableErrorError),
  );
}

export function unprocessableErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<UnprocessableErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnprocessableErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnprocessableErrorError' from JSON`,
  );
}

/** @internal */
export const UnprocessableError$inboundSchema: z.ZodType<
  UnprocessableError,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: UnprocessableErrorObject$inboundSchema,
  error: z.lazy(() => UnprocessableErrorError$inboundSchema),
})
  .transform((v) => {
    return new UnprocessableError(v);
  });

/** @internal */
export type UnprocessableError$Outbound = {
  object: string;
  error: UnprocessableErrorError$Outbound;
};

/** @internal */
export const UnprocessableError$outboundSchema: z.ZodType<
  UnprocessableError$Outbound,
  z.ZodTypeDef,
  UnprocessableError
> = z.instanceof(UnprocessableError)
  .transform(v => v.data$)
  .pipe(z.object({
    object: UnprocessableErrorObject$outboundSchema,
    error: z.lazy(() => UnprocessableErrorError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableError$ {
  /** @deprecated use `UnprocessableError$inboundSchema` instead. */
  export const inboundSchema = UnprocessableError$inboundSchema;
  /** @deprecated use `UnprocessableError$outboundSchema` instead. */
  export const outboundSchema = UnprocessableError$outboundSchema;
  /** @deprecated use `UnprocessableError$Outbound` instead. */
  export type Outbound = UnprocessableError$Outbound;
}
