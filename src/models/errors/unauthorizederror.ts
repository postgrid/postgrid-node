/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const UnauthorizedErrorObject = {
  Error: "error",
} as const;
export type UnauthorizedErrorObject = ClosedEnum<
  typeof UnauthorizedErrorObject
>;

export const UnauthorizedErrorType = {
  MissingAuthError: "missing_auth_error",
} as const;
export type UnauthorizedErrorType = ClosedEnum<typeof UnauthorizedErrorType>;

export type UnauthorizedErrorError = {
  type: UnauthorizedErrorType;
  message: string;
};

export type UnauthorizedErrorData = {
  object: UnauthorizedErrorObject;
  error: UnauthorizedErrorError;
};

export class UnauthorizedError extends Error {
  object: UnauthorizedErrorObject;
  error: UnauthorizedErrorError;

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedErrorData;

  constructor(err: UnauthorizedErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.object = err.object;
    this.error = err.error;

    this.name = "UnauthorizedError";
  }
}

/** @internal */
export const UnauthorizedErrorObject$inboundSchema: z.ZodNativeEnum<
  typeof UnauthorizedErrorObject
> = z.nativeEnum(UnauthorizedErrorObject);

/** @internal */
export const UnauthorizedErrorObject$outboundSchema: z.ZodNativeEnum<
  typeof UnauthorizedErrorObject
> = UnauthorizedErrorObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedErrorObject$ {
  /** @deprecated use `UnauthorizedErrorObject$inboundSchema` instead. */
  export const inboundSchema = UnauthorizedErrorObject$inboundSchema;
  /** @deprecated use `UnauthorizedErrorObject$outboundSchema` instead. */
  export const outboundSchema = UnauthorizedErrorObject$outboundSchema;
}

/** @internal */
export const UnauthorizedErrorType$inboundSchema: z.ZodNativeEnum<
  typeof UnauthorizedErrorType
> = z.nativeEnum(UnauthorizedErrorType);

/** @internal */
export const UnauthorizedErrorType$outboundSchema: z.ZodNativeEnum<
  typeof UnauthorizedErrorType
> = UnauthorizedErrorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedErrorType$ {
  /** @deprecated use `UnauthorizedErrorType$inboundSchema` instead. */
  export const inboundSchema = UnauthorizedErrorType$inboundSchema;
  /** @deprecated use `UnauthorizedErrorType$outboundSchema` instead. */
  export const outboundSchema = UnauthorizedErrorType$outboundSchema;
}

/** @internal */
export const UnauthorizedErrorError$inboundSchema: z.ZodType<
  UnauthorizedErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UnauthorizedErrorType$inboundSchema,
  message: z.string(),
});

/** @internal */
export type UnauthorizedErrorError$Outbound = {
  type: string;
  message: string;
};

/** @internal */
export const UnauthorizedErrorError$outboundSchema: z.ZodType<
  UnauthorizedErrorError$Outbound,
  z.ZodTypeDef,
  UnauthorizedErrorError
> = z.object({
  type: UnauthorizedErrorType$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedErrorError$ {
  /** @deprecated use `UnauthorizedErrorError$inboundSchema` instead. */
  export const inboundSchema = UnauthorizedErrorError$inboundSchema;
  /** @deprecated use `UnauthorizedErrorError$outboundSchema` instead. */
  export const outboundSchema = UnauthorizedErrorError$outboundSchema;
  /** @deprecated use `UnauthorizedErrorError$Outbound` instead. */
  export type Outbound = UnauthorizedErrorError$Outbound;
}

export function unauthorizedErrorErrorToJSON(
  unauthorizedErrorError: UnauthorizedErrorError,
): string {
  return JSON.stringify(
    UnauthorizedErrorError$outboundSchema.parse(unauthorizedErrorError),
  );
}

export function unauthorizedErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<UnauthorizedErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnauthorizedErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnauthorizedErrorError' from JSON`,
  );
}

/** @internal */
export const UnauthorizedError$inboundSchema: z.ZodType<
  UnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: UnauthorizedErrorObject$inboundSchema,
  error: z.lazy(() => UnauthorizedErrorError$inboundSchema),
})
  .transform((v) => {
    return new UnauthorizedError(v);
  });

/** @internal */
export type UnauthorizedError$Outbound = {
  object: string;
  error: UnauthorizedErrorError$Outbound;
};

/** @internal */
export const UnauthorizedError$outboundSchema: z.ZodType<
  UnauthorizedError$Outbound,
  z.ZodTypeDef,
  UnauthorizedError
> = z.instanceof(UnauthorizedError)
  .transform(v => v.data$)
  .pipe(z.object({
    object: UnauthorizedErrorObject$outboundSchema,
    error: z.lazy(() => UnauthorizedErrorError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedError$ {
  /** @deprecated use `UnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = UnauthorizedError$inboundSchema;
  /** @deprecated use `UnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = UnauthorizedError$outboundSchema;
  /** @deprecated use `UnauthorizedError$Outbound` instead. */
  export type Outbound = UnauthorizedError$Outbound;
}
