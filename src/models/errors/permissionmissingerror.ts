/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const PermissionMissingErrorObject = {
  Error: "error",
} as const;
export type PermissionMissingErrorObject = ClosedEnum<
  typeof PermissionMissingErrorObject
>;

export const PermissionMissingErrorType = {
  PermissionMissingError: "permission_missing_error",
} as const;
export type PermissionMissingErrorType = ClosedEnum<
  typeof PermissionMissingErrorType
>;

export type PermissionMissingErrorError = {
  type: PermissionMissingErrorType;
  message: string;
};

export type PermissionMissingErrorData = {
  object: PermissionMissingErrorObject;
  error: PermissionMissingErrorError;
};

export class PermissionMissingError extends Error {
  object: PermissionMissingErrorObject;
  error: PermissionMissingErrorError;

  /** The original data that was passed to this error instance. */
  data$: PermissionMissingErrorData;

  constructor(err: PermissionMissingErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.object = err.object;
    this.error = err.error;

    this.name = "PermissionMissingError";
  }
}

/** @internal */
export const PermissionMissingErrorObject$inboundSchema: z.ZodNativeEnum<
  typeof PermissionMissingErrorObject
> = z.nativeEnum(PermissionMissingErrorObject);

/** @internal */
export const PermissionMissingErrorObject$outboundSchema: z.ZodNativeEnum<
  typeof PermissionMissingErrorObject
> = PermissionMissingErrorObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PermissionMissingErrorObject$ {
  /** @deprecated use `PermissionMissingErrorObject$inboundSchema` instead. */
  export const inboundSchema = PermissionMissingErrorObject$inboundSchema;
  /** @deprecated use `PermissionMissingErrorObject$outboundSchema` instead. */
  export const outboundSchema = PermissionMissingErrorObject$outboundSchema;
}

/** @internal */
export const PermissionMissingErrorType$inboundSchema: z.ZodNativeEnum<
  typeof PermissionMissingErrorType
> = z.nativeEnum(PermissionMissingErrorType);

/** @internal */
export const PermissionMissingErrorType$outboundSchema: z.ZodNativeEnum<
  typeof PermissionMissingErrorType
> = PermissionMissingErrorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PermissionMissingErrorType$ {
  /** @deprecated use `PermissionMissingErrorType$inboundSchema` instead. */
  export const inboundSchema = PermissionMissingErrorType$inboundSchema;
  /** @deprecated use `PermissionMissingErrorType$outboundSchema` instead. */
  export const outboundSchema = PermissionMissingErrorType$outboundSchema;
}

/** @internal */
export const PermissionMissingErrorError$inboundSchema: z.ZodType<
  PermissionMissingErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PermissionMissingErrorType$inboundSchema,
  message: z.string(),
});

/** @internal */
export type PermissionMissingErrorError$Outbound = {
  type: string;
  message: string;
};

/** @internal */
export const PermissionMissingErrorError$outboundSchema: z.ZodType<
  PermissionMissingErrorError$Outbound,
  z.ZodTypeDef,
  PermissionMissingErrorError
> = z.object({
  type: PermissionMissingErrorType$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PermissionMissingErrorError$ {
  /** @deprecated use `PermissionMissingErrorError$inboundSchema` instead. */
  export const inboundSchema = PermissionMissingErrorError$inboundSchema;
  /** @deprecated use `PermissionMissingErrorError$outboundSchema` instead. */
  export const outboundSchema = PermissionMissingErrorError$outboundSchema;
  /** @deprecated use `PermissionMissingErrorError$Outbound` instead. */
  export type Outbound = PermissionMissingErrorError$Outbound;
}

export function permissionMissingErrorErrorToJSON(
  permissionMissingErrorError: PermissionMissingErrorError,
): string {
  return JSON.stringify(
    PermissionMissingErrorError$outboundSchema.parse(
      permissionMissingErrorError,
    ),
  );
}

export function permissionMissingErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<PermissionMissingErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PermissionMissingErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PermissionMissingErrorError' from JSON`,
  );
}

/** @internal */
export const PermissionMissingError$inboundSchema: z.ZodType<
  PermissionMissingError,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: PermissionMissingErrorObject$inboundSchema,
  error: z.lazy(() => PermissionMissingErrorError$inboundSchema),
})
  .transform((v) => {
    return new PermissionMissingError(v);
  });

/** @internal */
export type PermissionMissingError$Outbound = {
  object: string;
  error: PermissionMissingErrorError$Outbound;
};

/** @internal */
export const PermissionMissingError$outboundSchema: z.ZodType<
  PermissionMissingError$Outbound,
  z.ZodTypeDef,
  PermissionMissingError
> = z.instanceof(PermissionMissingError)
  .transform(v => v.data$)
  .pipe(z.object({
    object: PermissionMissingErrorObject$outboundSchema,
    error: z.lazy(() => PermissionMissingErrorError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PermissionMissingError$ {
  /** @deprecated use `PermissionMissingError$inboundSchema` instead. */
  export const inboundSchema = PermissionMissingError$inboundSchema;
  /** @deprecated use `PermissionMissingError$outboundSchema` instead. */
  export const outboundSchema = PermissionMissingError$outboundSchema;
  /** @deprecated use `PermissionMissingError$Outbound` instead. */
  export type Outbound = PermissionMissingError$Outbound;
}
