/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const NotFoundErrorObject = {
  Error: "error",
} as const;
export type NotFoundErrorObject = ClosedEnum<typeof NotFoundErrorObject>;

export const NotFoundErrorType = {
  NotFoundError: "not_found_error",
} as const;
export type NotFoundErrorType = ClosedEnum<typeof NotFoundErrorType>;

export type NotFoundErrorError = {
  type: NotFoundErrorType;
  message: string;
};

export type NotFoundErrorData = {
  object: NotFoundErrorObject;
  error: NotFoundErrorError;
};

export class NotFoundError extends Error {
  object: NotFoundErrorObject;
  error: NotFoundErrorError;

  /** The original data that was passed to this error instance. */
  data$: NotFoundErrorData;

  constructor(err: NotFoundErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.object = err.object;
    this.error = err.error;

    this.name = "NotFoundError";
  }
}

/** @internal */
export const NotFoundErrorObject$inboundSchema: z.ZodNativeEnum<
  typeof NotFoundErrorObject
> = z.nativeEnum(NotFoundErrorObject);

/** @internal */
export const NotFoundErrorObject$outboundSchema: z.ZodNativeEnum<
  typeof NotFoundErrorObject
> = NotFoundErrorObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFoundErrorObject$ {
  /** @deprecated use `NotFoundErrorObject$inboundSchema` instead. */
  export const inboundSchema = NotFoundErrorObject$inboundSchema;
  /** @deprecated use `NotFoundErrorObject$outboundSchema` instead. */
  export const outboundSchema = NotFoundErrorObject$outboundSchema;
}

/** @internal */
export const NotFoundErrorType$inboundSchema: z.ZodNativeEnum<
  typeof NotFoundErrorType
> = z.nativeEnum(NotFoundErrorType);

/** @internal */
export const NotFoundErrorType$outboundSchema: z.ZodNativeEnum<
  typeof NotFoundErrorType
> = NotFoundErrorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFoundErrorType$ {
  /** @deprecated use `NotFoundErrorType$inboundSchema` instead. */
  export const inboundSchema = NotFoundErrorType$inboundSchema;
  /** @deprecated use `NotFoundErrorType$outboundSchema` instead. */
  export const outboundSchema = NotFoundErrorType$outboundSchema;
}

/** @internal */
export const NotFoundErrorError$inboundSchema: z.ZodType<
  NotFoundErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: NotFoundErrorType$inboundSchema,
  message: z.string(),
});

/** @internal */
export type NotFoundErrorError$Outbound = {
  type: string;
  message: string;
};

/** @internal */
export const NotFoundErrorError$outboundSchema: z.ZodType<
  NotFoundErrorError$Outbound,
  z.ZodTypeDef,
  NotFoundErrorError
> = z.object({
  type: NotFoundErrorType$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFoundErrorError$ {
  /** @deprecated use `NotFoundErrorError$inboundSchema` instead. */
  export const inboundSchema = NotFoundErrorError$inboundSchema;
  /** @deprecated use `NotFoundErrorError$outboundSchema` instead. */
  export const outboundSchema = NotFoundErrorError$outboundSchema;
  /** @deprecated use `NotFoundErrorError$Outbound` instead. */
  export type Outbound = NotFoundErrorError$Outbound;
}

export function notFoundErrorErrorToJSON(
  notFoundErrorError: NotFoundErrorError,
): string {
  return JSON.stringify(
    NotFoundErrorError$outboundSchema.parse(notFoundErrorError),
  );
}

export function notFoundErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<NotFoundErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotFoundErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotFoundErrorError' from JSON`,
  );
}

/** @internal */
export const NotFoundError$inboundSchema: z.ZodType<
  NotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: NotFoundErrorObject$inboundSchema,
  error: z.lazy(() => NotFoundErrorError$inboundSchema),
})
  .transform((v) => {
    return new NotFoundError(v);
  });

/** @internal */
export type NotFoundError$Outbound = {
  object: string;
  error: NotFoundErrorError$Outbound;
};

/** @internal */
export const NotFoundError$outboundSchema: z.ZodType<
  NotFoundError$Outbound,
  z.ZodTypeDef,
  NotFoundError
> = z.instanceof(NotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    object: NotFoundErrorObject$outboundSchema,
    error: z.lazy(() => NotFoundErrorError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFoundError$ {
  /** @deprecated use `NotFoundError$inboundSchema` instead. */
  export const inboundSchema = NotFoundError$inboundSchema;
  /** @deprecated use `NotFoundError$outboundSchema` instead. */
  export const outboundSchema = NotFoundError$outboundSchema;
  /** @deprecated use `NotFoundError$Outbound` instead. */
  export type Outbound = NotFoundError$Outbound;
}
