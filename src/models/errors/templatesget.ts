/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  PermissionMissingError,
  PermissionMissingError$inboundSchema,
  PermissionMissingError$Outbound,
  PermissionMissingError$outboundSchema,
} from "./permissionmissingerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
import {
  UnauthorizedError,
  UnauthorizedError$inboundSchema,
  UnauthorizedError$Outbound,
  UnauthorizedError$outboundSchema,
} from "./unauthorizederror.js";

/**
 * the Template.
 */
export type TemplatesGetResponseBody =
  | UnauthorizedError
  | PermissionMissingError;

/** @internal */
export const TemplatesGetResponseBody$inboundSchema: z.ZodType<
  TemplatesGetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  UnauthorizedError$inboundSchema,
  PermissionMissingError$inboundSchema,
]);

/** @internal */
export type TemplatesGetResponseBody$Outbound =
  | UnauthorizedError$Outbound
  | PermissionMissingError$Outbound;

/** @internal */
export const TemplatesGetResponseBody$outboundSchema: z.ZodType<
  TemplatesGetResponseBody$Outbound,
  z.ZodTypeDef,
  TemplatesGetResponseBody
> = z.union([
  UnauthorizedError$outboundSchema,
  PermissionMissingError$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplatesGetResponseBody$ {
  /** @deprecated use `TemplatesGetResponseBody$inboundSchema` instead. */
  export const inboundSchema = TemplatesGetResponseBody$inboundSchema;
  /** @deprecated use `TemplatesGetResponseBody$outboundSchema` instead. */
  export const outboundSchema = TemplatesGetResponseBody$outboundSchema;
  /** @deprecated use `TemplatesGetResponseBody$Outbound` instead. */
  export type Outbound = TemplatesGetResponseBody$Outbound;
}

export function templatesGetResponseBodyToJSON(
  templatesGetResponseBody: TemplatesGetResponseBody,
): string {
  return JSON.stringify(
    TemplatesGetResponseBody$outboundSchema.parse(templatesGetResponseBody),
  );
}

export function templatesGetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TemplatesGetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplatesGetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplatesGetResponseBody' from JSON`,
  );
}
