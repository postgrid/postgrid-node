/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BoxesListRequest = {
  skip?: number | undefined;
  limit?: number | undefined;
  /**
   * You can supply any string to help narrow down the list of resources. For example, if you pass `"New York"` (quoted), it will return resources that have that string present somewhere in their response. Alternatively, you can supply a structured search query. See the documentation on `StructuredSearchQuery` for more details.
   */
  search?: string | undefined;
};

/** @internal */
export const BoxesListRequest$inboundSchema: z.ZodType<
  BoxesListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.number().int().default(0),
  limit: z.number().int().default(10),
  search: z.string().optional(),
});

/** @internal */
export type BoxesListRequest$Outbound = {
  skip: number;
  limit: number;
  search?: string | undefined;
};

/** @internal */
export const BoxesListRequest$outboundSchema: z.ZodType<
  BoxesListRequest$Outbound,
  z.ZodTypeDef,
  BoxesListRequest
> = z.object({
  skip: z.number().int().default(0),
  limit: z.number().int().default(10),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BoxesListRequest$ {
  /** @deprecated use `BoxesListRequest$inboundSchema` instead. */
  export const inboundSchema = BoxesListRequest$inboundSchema;
  /** @deprecated use `BoxesListRequest$outboundSchema` instead. */
  export const outboundSchema = BoxesListRequest$outboundSchema;
  /** @deprecated use `BoxesListRequest$Outbound` instead. */
  export type Outbound = BoxesListRequest$Outbound;
}

export function boxesListRequestToJSON(
  boxesListRequest: BoxesListRequest,
): string {
  return JSON.stringify(
    BoxesListRequest$outboundSchema.parse(boxesListRequest),
  );
}

export function boxesListRequestFromJSON(
  jsonString: string,
): SafeParseResult<BoxesListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BoxesListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BoxesListRequest' from JSON`,
  );
}
