/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TemplatesDeleteRequest = {
  /**
   * The ID of the template you want to delete.
   */
  id: string;
};

/**
 * Always `template`.
 */
export const TemplatesDeleteObject = {
  Template: "template",
} as const;
/**
 * Always `template`.
 */
export type TemplatesDeleteObject = ClosedEnum<typeof TemplatesDeleteObject>;

/**
 * The request has succeeded.
 */
export type TemplatesDeleteResponseBody = {
  /**
   * Always `template`.
   */
  object: TemplatesDeleteObject;
  /**
   * A unique ID prefixed with template_
   */
  id: string;
  deleted: boolean;
};

/** @internal */
export const TemplatesDeleteRequest$inboundSchema: z.ZodType<
  TemplatesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type TemplatesDeleteRequest$Outbound = {
  id: string;
};

/** @internal */
export const TemplatesDeleteRequest$outboundSchema: z.ZodType<
  TemplatesDeleteRequest$Outbound,
  z.ZodTypeDef,
  TemplatesDeleteRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplatesDeleteRequest$ {
  /** @deprecated use `TemplatesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = TemplatesDeleteRequest$inboundSchema;
  /** @deprecated use `TemplatesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = TemplatesDeleteRequest$outboundSchema;
  /** @deprecated use `TemplatesDeleteRequest$Outbound` instead. */
  export type Outbound = TemplatesDeleteRequest$Outbound;
}

export function templatesDeleteRequestToJSON(
  templatesDeleteRequest: TemplatesDeleteRequest,
): string {
  return JSON.stringify(
    TemplatesDeleteRequest$outboundSchema.parse(templatesDeleteRequest),
  );
}

export function templatesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<TemplatesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplatesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplatesDeleteRequest' from JSON`,
  );
}

/** @internal */
export const TemplatesDeleteObject$inboundSchema: z.ZodNativeEnum<
  typeof TemplatesDeleteObject
> = z.nativeEnum(TemplatesDeleteObject);

/** @internal */
export const TemplatesDeleteObject$outboundSchema: z.ZodNativeEnum<
  typeof TemplatesDeleteObject
> = TemplatesDeleteObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplatesDeleteObject$ {
  /** @deprecated use `TemplatesDeleteObject$inboundSchema` instead. */
  export const inboundSchema = TemplatesDeleteObject$inboundSchema;
  /** @deprecated use `TemplatesDeleteObject$outboundSchema` instead. */
  export const outboundSchema = TemplatesDeleteObject$outboundSchema;
}

/** @internal */
export const TemplatesDeleteResponseBody$inboundSchema: z.ZodType<
  TemplatesDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: TemplatesDeleteObject$inboundSchema,
  id: z.string(),
  deleted: z.boolean(),
});

/** @internal */
export type TemplatesDeleteResponseBody$Outbound = {
  object: string;
  id: string;
  deleted: boolean;
};

/** @internal */
export const TemplatesDeleteResponseBody$outboundSchema: z.ZodType<
  TemplatesDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  TemplatesDeleteResponseBody
> = z.object({
  object: TemplatesDeleteObject$outboundSchema,
  id: z.string(),
  deleted: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplatesDeleteResponseBody$ {
  /** @deprecated use `TemplatesDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = TemplatesDeleteResponseBody$inboundSchema;
  /** @deprecated use `TemplatesDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = TemplatesDeleteResponseBody$outboundSchema;
  /** @deprecated use `TemplatesDeleteResponseBody$Outbound` instead. */
  export type Outbound = TemplatesDeleteResponseBody$Outbound;
}

export function templatesDeleteResponseBodyToJSON(
  templatesDeleteResponseBody: TemplatesDeleteResponseBody,
): string {
  return JSON.stringify(
    TemplatesDeleteResponseBody$outboundSchema.parse(
      templatesDeleteResponseBody,
    ),
  );
}

export function templatesDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TemplatesDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplatesDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplatesDeleteResponseBody' from JSON`,
  );
}
