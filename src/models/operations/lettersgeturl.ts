/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LettersGetURLRequest = {
  /**
   * The ID of the letter to retrieve the preview URL for.
   */
  id: string;
};

/**
 * the Letter Preview URL.
 */
export type LettersGetURLResponseBody = {
  /**
   * A unique ID prefixed with letter_
   */
  id: string;
  object: string;
  /**
   * A signed URL linking to the order preview PDF. The link remains valid for 15 minutes from the time of the API call.
   */
  url: string;
};

/** @internal */
export const LettersGetURLRequest$inboundSchema: z.ZodType<
  LettersGetURLRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type LettersGetURLRequest$Outbound = {
  id: string;
};

/** @internal */
export const LettersGetURLRequest$outboundSchema: z.ZodType<
  LettersGetURLRequest$Outbound,
  z.ZodTypeDef,
  LettersGetURLRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LettersGetURLRequest$ {
  /** @deprecated use `LettersGetURLRequest$inboundSchema` instead. */
  export const inboundSchema = LettersGetURLRequest$inboundSchema;
  /** @deprecated use `LettersGetURLRequest$outboundSchema` instead. */
  export const outboundSchema = LettersGetURLRequest$outboundSchema;
  /** @deprecated use `LettersGetURLRequest$Outbound` instead. */
  export type Outbound = LettersGetURLRequest$Outbound;
}

export function lettersGetURLRequestToJSON(
  lettersGetURLRequest: LettersGetURLRequest,
): string {
  return JSON.stringify(
    LettersGetURLRequest$outboundSchema.parse(lettersGetURLRequest),
  );
}

export function lettersGetURLRequestFromJSON(
  jsonString: string,
): SafeParseResult<LettersGetURLRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LettersGetURLRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LettersGetURLRequest' from JSON`,
  );
}

/** @internal */
export const LettersGetURLResponseBody$inboundSchema: z.ZodType<
  LettersGetURLResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: z.string(),
  url: z.string(),
});

/** @internal */
export type LettersGetURLResponseBody$Outbound = {
  id: string;
  object: string;
  url: string;
};

/** @internal */
export const LettersGetURLResponseBody$outboundSchema: z.ZodType<
  LettersGetURLResponseBody$Outbound,
  z.ZodTypeDef,
  LettersGetURLResponseBody
> = z.object({
  id: z.string(),
  object: z.string(),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LettersGetURLResponseBody$ {
  /** @deprecated use `LettersGetURLResponseBody$inboundSchema` instead. */
  export const inboundSchema = LettersGetURLResponseBody$inboundSchema;
  /** @deprecated use `LettersGetURLResponseBody$outboundSchema` instead. */
  export const outboundSchema = LettersGetURLResponseBody$outboundSchema;
  /** @deprecated use `LettersGetURLResponseBody$Outbound` instead. */
  export type Outbound = LettersGetURLResponseBody$Outbound;
}

export function lettersGetURLResponseBodyToJSON(
  lettersGetURLResponseBody: LettersGetURLResponseBody,
): string {
  return JSON.stringify(
    LettersGetURLResponseBody$outboundSchema.parse(lettersGetURLResponseBody),
  );
}

export function lettersGetURLResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LettersGetURLResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LettersGetURLResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LettersGetURLResponseBody' from JSON`,
  );
}
