/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TemplatesUpdateRequest = {
  /**
   * The ID of the template you want to update.
   */
  id: string;
  templateUpdate: components.TemplateUpdate;
};

/** @internal */
export const TemplatesUpdateRequest$inboundSchema: z.ZodType<
  TemplatesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  TemplateUpdate: components.TemplateUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "TemplateUpdate": "templateUpdate",
  });
});

/** @internal */
export type TemplatesUpdateRequest$Outbound = {
  id: string;
  TemplateUpdate: components.TemplateUpdate$Outbound;
};

/** @internal */
export const TemplatesUpdateRequest$outboundSchema: z.ZodType<
  TemplatesUpdateRequest$Outbound,
  z.ZodTypeDef,
  TemplatesUpdateRequest
> = z.object({
  id: z.string(),
  templateUpdate: components.TemplateUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    templateUpdate: "TemplateUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplatesUpdateRequest$ {
  /** @deprecated use `TemplatesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = TemplatesUpdateRequest$inboundSchema;
  /** @deprecated use `TemplatesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = TemplatesUpdateRequest$outboundSchema;
  /** @deprecated use `TemplatesUpdateRequest$Outbound` instead. */
  export type Outbound = TemplatesUpdateRequest$Outbound;
}

export function templatesUpdateRequestToJSON(
  templatesUpdateRequest: TemplatesUpdateRequest,
): string {
  return JSON.stringify(
    TemplatesUpdateRequest$outboundSchema.parse(templatesUpdateRequest),
  );
}

export function templatesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<TemplatesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplatesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplatesUpdateRequest' from JSON`,
  );
}
