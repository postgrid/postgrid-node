/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BankAccountsDeleteRequest = {
  /**
   * The ID of the bank account you want to delete.
   */
  id: string;
};

/**
 * Always `bank_account`.
 */
export const ObjectT = {
  BankAccount: "bank_account",
} as const;
/**
 * Always `bank_account`.
 */
export type ObjectT = ClosedEnum<typeof ObjectT>;

/**
 * The request has succeeded.
 */
export type BankAccountsDeleteResponseBody = {
  /**
   * Always `bank_account`.
   */
  object: ObjectT;
  /**
   * A unique ID prefixed with bank_account_
   */
  id: string;
  deleted: boolean;
};

/** @internal */
export const BankAccountsDeleteRequest$inboundSchema: z.ZodType<
  BankAccountsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type BankAccountsDeleteRequest$Outbound = {
  id: string;
};

/** @internal */
export const BankAccountsDeleteRequest$outboundSchema: z.ZodType<
  BankAccountsDeleteRequest$Outbound,
  z.ZodTypeDef,
  BankAccountsDeleteRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountsDeleteRequest$ {
  /** @deprecated use `BankAccountsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = BankAccountsDeleteRequest$inboundSchema;
  /** @deprecated use `BankAccountsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = BankAccountsDeleteRequest$outboundSchema;
  /** @deprecated use `BankAccountsDeleteRequest$Outbound` instead. */
  export type Outbound = BankAccountsDeleteRequest$Outbound;
}

export function bankAccountsDeleteRequestToJSON(
  bankAccountsDeleteRequest: BankAccountsDeleteRequest,
): string {
  return JSON.stringify(
    BankAccountsDeleteRequest$outboundSchema.parse(bankAccountsDeleteRequest),
  );
}

export function bankAccountsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountsDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccountsDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountsDeleteRequest' from JSON`,
  );
}

/** @internal */
export const ObjectT$inboundSchema: z.ZodNativeEnum<typeof ObjectT> = z
  .nativeEnum(ObjectT);

/** @internal */
export const ObjectT$outboundSchema: z.ZodNativeEnum<typeof ObjectT> =
  ObjectT$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectT$ {
  /** @deprecated use `ObjectT$inboundSchema` instead. */
  export const inboundSchema = ObjectT$inboundSchema;
  /** @deprecated use `ObjectT$outboundSchema` instead. */
  export const outboundSchema = ObjectT$outboundSchema;
}

/** @internal */
export const BankAccountsDeleteResponseBody$inboundSchema: z.ZodType<
  BankAccountsDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ObjectT$inboundSchema,
  id: z.string(),
  deleted: z.boolean(),
});

/** @internal */
export type BankAccountsDeleteResponseBody$Outbound = {
  object: string;
  id: string;
  deleted: boolean;
};

/** @internal */
export const BankAccountsDeleteResponseBody$outboundSchema: z.ZodType<
  BankAccountsDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  BankAccountsDeleteResponseBody
> = z.object({
  object: ObjectT$outboundSchema,
  id: z.string(),
  deleted: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountsDeleteResponseBody$ {
  /** @deprecated use `BankAccountsDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = BankAccountsDeleteResponseBody$inboundSchema;
  /** @deprecated use `BankAccountsDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = BankAccountsDeleteResponseBody$outboundSchema;
  /** @deprecated use `BankAccountsDeleteResponseBody$Outbound` instead. */
  export type Outbound = BankAccountsDeleteResponseBody$Outbound;
}

export function bankAccountsDeleteResponseBodyToJSON(
  bankAccountsDeleteResponseBody: BankAccountsDeleteResponseBody,
): string {
  return JSON.stringify(
    BankAccountsDeleteResponseBody$outboundSchema.parse(
      bankAccountsDeleteResponseBody,
    ),
  );
}

export function bankAccountsDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountsDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccountsDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountsDeleteResponseBody' from JSON`,
  );
}
