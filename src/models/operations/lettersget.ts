/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LettersGetRequest = {
  /**
   * The ID of the letter to retrieve.
   */
  id: string;
};

/** @internal */
export const LettersGetRequest$inboundSchema: z.ZodType<
  LettersGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type LettersGetRequest$Outbound = {
  id: string;
};

/** @internal */
export const LettersGetRequest$outboundSchema: z.ZodType<
  LettersGetRequest$Outbound,
  z.ZodTypeDef,
  LettersGetRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LettersGetRequest$ {
  /** @deprecated use `LettersGetRequest$inboundSchema` instead. */
  export const inboundSchema = LettersGetRequest$inboundSchema;
  /** @deprecated use `LettersGetRequest$outboundSchema` instead. */
  export const outboundSchema = LettersGetRequest$outboundSchema;
  /** @deprecated use `LettersGetRequest$Outbound` instead. */
  export type Outbound = LettersGetRequest$Outbound;
}

export function lettersGetRequestToJSON(
  lettersGetRequest: LettersGetRequest,
): string {
  return JSON.stringify(
    LettersGetRequest$outboundSchema.parse(lettersGetRequest),
  );
}

export function lettersGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<LettersGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LettersGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LettersGetRequest' from JSON`,
  );
}
