/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactsDeleteRequest = {
  id: string;
};

/**
 * Always `contact`.
 */
export const ContactsDeleteObject = {
  Contact: "contact",
} as const;
/**
 * Always `contact`.
 */
export type ContactsDeleteObject = ClosedEnum<typeof ContactsDeleteObject>;

/**
 * The request has succeeded.
 */
export type ContactsDeleteResponseBody = {
  /**
   * Always `contact`.
   */
  object: ContactsDeleteObject;
  /**
   * A unique ID prefixed with contact_
   */
  id: string;
  deleted: boolean;
};

/** @internal */
export const ContactsDeleteRequest$inboundSchema: z.ZodType<
  ContactsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ContactsDeleteRequest$Outbound = {
  id: string;
};

/** @internal */
export const ContactsDeleteRequest$outboundSchema: z.ZodType<
  ContactsDeleteRequest$Outbound,
  z.ZodTypeDef,
  ContactsDeleteRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteRequest$ {
  /** @deprecated use `ContactsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteRequest$inboundSchema;
  /** @deprecated use `ContactsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteRequest$outboundSchema;
  /** @deprecated use `ContactsDeleteRequest$Outbound` instead. */
  export type Outbound = ContactsDeleteRequest$Outbound;
}

export function contactsDeleteRequestToJSON(
  contactsDeleteRequest: ContactsDeleteRequest,
): string {
  return JSON.stringify(
    ContactsDeleteRequest$outboundSchema.parse(contactsDeleteRequest),
  );
}

export function contactsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteRequest' from JSON`,
  );
}

/** @internal */
export const ContactsDeleteObject$inboundSchema: z.ZodNativeEnum<
  typeof ContactsDeleteObject
> = z.nativeEnum(ContactsDeleteObject);

/** @internal */
export const ContactsDeleteObject$outboundSchema: z.ZodNativeEnum<
  typeof ContactsDeleteObject
> = ContactsDeleteObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteObject$ {
  /** @deprecated use `ContactsDeleteObject$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteObject$inboundSchema;
  /** @deprecated use `ContactsDeleteObject$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteObject$outboundSchema;
}

/** @internal */
export const ContactsDeleteResponseBody$inboundSchema: z.ZodType<
  ContactsDeleteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ContactsDeleteObject$inboundSchema,
  id: z.string(),
  deleted: z.boolean(),
});

/** @internal */
export type ContactsDeleteResponseBody$Outbound = {
  object: string;
  id: string;
  deleted: boolean;
};

/** @internal */
export const ContactsDeleteResponseBody$outboundSchema: z.ZodType<
  ContactsDeleteResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsDeleteResponseBody
> = z.object({
  object: ContactsDeleteObject$outboundSchema,
  id: z.string(),
  deleted: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsDeleteResponseBody$ {
  /** @deprecated use `ContactsDeleteResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsDeleteResponseBody$inboundSchema;
  /** @deprecated use `ContactsDeleteResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsDeleteResponseBody$outboundSchema;
  /** @deprecated use `ContactsDeleteResponseBody$Outbound` instead. */
  export type Outbound = ContactsDeleteResponseBody$Outbound;
}

export function contactsDeleteResponseBodyToJSON(
  contactsDeleteResponseBody: ContactsDeleteResponseBody,
): string {
  return JSON.stringify(
    ContactsDeleteResponseBody$outboundSchema.parse(contactsDeleteResponseBody),
  );
}

export function contactsDeleteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsDeleteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsDeleteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsDeleteResponseBody' from JSON`,
  );
}
