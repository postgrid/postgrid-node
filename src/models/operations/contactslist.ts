/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactsListRequest = {
  skip?: number | undefined;
  limit?: number | undefined;
  /**
   * You can supply any string to help narrow down the list of resources. For example, if you pass `"New York"` (quoted), it will return resources that have that string present somewhere in their response. Alternatively, you can supply a structured search query. See the documentation on `StructuredSearchQuery` for more details.
   */
  search?: string | undefined;
};

export const ContactsListObject = {
  List: "list",
} as const;
export type ContactsListObject = ClosedEnum<typeof ContactsListObject>;

/**
 * The request has succeeded.
 */
export type ContactsListResponseBody = {
  object: ContactsListObject;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<components.Contact>;
};

/** @internal */
export const ContactsListRequest$inboundSchema: z.ZodType<
  ContactsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.number().int().default(0),
  limit: z.number().int().default(10),
  search: z.string().optional(),
});

/** @internal */
export type ContactsListRequest$Outbound = {
  skip: number;
  limit: number;
  search?: string | undefined;
};

/** @internal */
export const ContactsListRequest$outboundSchema: z.ZodType<
  ContactsListRequest$Outbound,
  z.ZodTypeDef,
  ContactsListRequest
> = z.object({
  skip: z.number().int().default(0),
  limit: z.number().int().default(10),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsListRequest$ {
  /** @deprecated use `ContactsListRequest$inboundSchema` instead. */
  export const inboundSchema = ContactsListRequest$inboundSchema;
  /** @deprecated use `ContactsListRequest$outboundSchema` instead. */
  export const outboundSchema = ContactsListRequest$outboundSchema;
  /** @deprecated use `ContactsListRequest$Outbound` instead. */
  export type Outbound = ContactsListRequest$Outbound;
}

export function contactsListRequestToJSON(
  contactsListRequest: ContactsListRequest,
): string {
  return JSON.stringify(
    ContactsListRequest$outboundSchema.parse(contactsListRequest),
  );
}

export function contactsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContactsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsListRequest' from JSON`,
  );
}

/** @internal */
export const ContactsListObject$inboundSchema: z.ZodNativeEnum<
  typeof ContactsListObject
> = z.nativeEnum(ContactsListObject);

/** @internal */
export const ContactsListObject$outboundSchema: z.ZodNativeEnum<
  typeof ContactsListObject
> = ContactsListObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsListObject$ {
  /** @deprecated use `ContactsListObject$inboundSchema` instead. */
  export const inboundSchema = ContactsListObject$inboundSchema;
  /** @deprecated use `ContactsListObject$outboundSchema` instead. */
  export const outboundSchema = ContactsListObject$outboundSchema;
}

/** @internal */
export const ContactsListResponseBody$inboundSchema: z.ZodType<
  ContactsListResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ContactsListObject$inboundSchema,
  totalCount: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
  data: z.array(components.Contact$inboundSchema),
});

/** @internal */
export type ContactsListResponseBody$Outbound = {
  object: string;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<components.Contact$Outbound>;
};

/** @internal */
export const ContactsListResponseBody$outboundSchema: z.ZodType<
  ContactsListResponseBody$Outbound,
  z.ZodTypeDef,
  ContactsListResponseBody
> = z.object({
  object: ContactsListObject$outboundSchema,
  totalCount: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
  data: z.array(components.Contact$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactsListResponseBody$ {
  /** @deprecated use `ContactsListResponseBody$inboundSchema` instead. */
  export const inboundSchema = ContactsListResponseBody$inboundSchema;
  /** @deprecated use `ContactsListResponseBody$outboundSchema` instead. */
  export const outboundSchema = ContactsListResponseBody$outboundSchema;
  /** @deprecated use `ContactsListResponseBody$Outbound` instead. */
  export type Outbound = ContactsListResponseBody$Outbound;
}

export function contactsListResponseBodyToJSON(
  contactsListResponseBody: ContactsListResponseBody,
): string {
  return JSON.stringify(
    ContactsListResponseBody$outboundSchema.parse(contactsListResponseBody),
  );
}

export function contactsListResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ContactsListResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactsListResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactsListResponseBody' from JSON`,
  );
}
