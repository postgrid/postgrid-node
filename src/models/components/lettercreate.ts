/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LetterCreateWithHTML,
  LetterCreateWithHTML$inboundSchema,
  LetterCreateWithHTML$Outbound,
  LetterCreateWithHTML$outboundSchema,
} from "./lettercreatewithhtml.js";
import {
  LetterCreateWithPDF,
  LetterCreateWithPDF$inboundSchema,
  LetterCreateWithPDF$Outbound,
  LetterCreateWithPDF$outboundSchema,
} from "./lettercreatewithpdf.js";
import {
  LetterCreateWithTemplate,
  LetterCreateWithTemplate$inboundSchema,
  LetterCreateWithTemplate$Outbound,
  LetterCreateWithTemplate$outboundSchema,
} from "./lettercreatewithtemplate.js";

export type LetterCreate =
  | LetterCreateWithTemplate
  | LetterCreateWithHTML
  | LetterCreateWithPDF;

/** @internal */
export const LetterCreate$inboundSchema: z.ZodType<
  LetterCreate,
  z.ZodTypeDef,
  unknown
> = z.union([
  LetterCreateWithTemplate$inboundSchema,
  LetterCreateWithHTML$inboundSchema,
  LetterCreateWithPDF$inboundSchema,
]);

/** @internal */
export type LetterCreate$Outbound =
  | LetterCreateWithTemplate$Outbound
  | LetterCreateWithHTML$Outbound
  | LetterCreateWithPDF$Outbound;

/** @internal */
export const LetterCreate$outboundSchema: z.ZodType<
  LetterCreate$Outbound,
  z.ZodTypeDef,
  LetterCreate
> = z.union([
  LetterCreateWithTemplate$outboundSchema,
  LetterCreateWithHTML$outboundSchema,
  LetterCreateWithPDF$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterCreate$ {
  /** @deprecated use `LetterCreate$inboundSchema` instead. */
  export const inboundSchema = LetterCreate$inboundSchema;
  /** @deprecated use `LetterCreate$outboundSchema` instead. */
  export const outboundSchema = LetterCreate$outboundSchema;
  /** @deprecated use `LetterCreate$Outbound` instead. */
  export type Outbound = LetterCreate$Outbound;
}

export function letterCreateToJSON(letterCreate: LetterCreate): string {
  return JSON.stringify(LetterCreate$outboundSchema.parse(letterCreate));
}

export function letterCreateFromJSON(
  jsonString: string,
): SafeParseResult<LetterCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LetterCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LetterCreate' from JSON`,
  );
}
