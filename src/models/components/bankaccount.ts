/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BankAccountCountryCode,
  BankAccountCountryCode$inboundSchema,
  BankAccountCountryCode$outboundSchema,
} from "./bankaccountcountrycode.js";

/**
 * Always `bank_account`.
 */
export const ObjectT = {
  BankAccount: "bank_account",
} as const;
/**
 * Always `bank_account`.
 */
export type ObjectT = ClosedEnum<typeof ObjectT>;

export type BankAccount = {
  /**
   * Always `bank_account`.
   */
  object: ObjectT;
  /**
   * The name of the bank.
   */
  bankName: string;
  /**
   * The primary address line of the bank.
   */
  bankPrimaryLine?: string | undefined;
  /**
   * The secondary address line of the bank.
   */
  bankSecondaryLine?: string | undefined;
  /**
   * The country code of the bank.
   */
  bankCountryCode: BankAccountCountryCode;
  /**
   * The account number of the bank account.
   */
  accountNumber: string;
  /**
   * The routing number of the bank account (for US).
   */
  routingNumber?: string | undefined;
  /**
   * The transit number of the bank account (for CA).
   */
  transitNumber?: string | undefined;
  /**
   * The route number of the bank account (for CA).
   */
  routeNumber?: string | undefined;
  /**
   * A unique ID prefixed with bank_account_
   */
  id: string;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * `true` if this is a live mode resource else `false`.
   */
  live: boolean;
  /**
   * The UTC time at which this resource was created.
   */
  createdAt: Date;
  /**
   * The UTC time at which this resource was last updated.
   */
  updatedAt: Date;
  /**
   * The signature text PostGrid uses to generate a signature for cheques created using this bank account. This is omitted if `signatureImage` is present.
   */
  signatureText?: string | undefined;
  /**
   * A signed link to the signature image uploaded when this bank account was created. This is omitted if `signatureText` is present.
   */
  signatureImage?: string | undefined;
};

/** @internal */
export const ObjectT$inboundSchema: z.ZodNativeEnum<typeof ObjectT> = z
  .nativeEnum(ObjectT);

/** @internal */
export const ObjectT$outboundSchema: z.ZodNativeEnum<typeof ObjectT> =
  ObjectT$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectT$ {
  /** @deprecated use `ObjectT$inboundSchema` instead. */
  export const inboundSchema = ObjectT$inboundSchema;
  /** @deprecated use `ObjectT$outboundSchema` instead. */
  export const outboundSchema = ObjectT$outboundSchema;
}

/** @internal */
export const BankAccount$inboundSchema: z.ZodType<
  BankAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ObjectT$inboundSchema,
  bankName: z.string(),
  bankPrimaryLine: z.string().optional(),
  bankSecondaryLine: z.string().optional(),
  bankCountryCode: BankAccountCountryCode$inboundSchema,
  accountNumber: z.string(),
  routingNumber: z.string().optional(),
  transitNumber: z.string().optional(),
  routeNumber: z.string().optional(),
  id: z.string(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  live: z.boolean(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  signatureText: z.string().optional(),
  signatureImage: z.string().optional(),
});

/** @internal */
export type BankAccount$Outbound = {
  object: string;
  bankName: string;
  bankPrimaryLine?: string | undefined;
  bankSecondaryLine?: string | undefined;
  bankCountryCode: string;
  accountNumber: string;
  routingNumber?: string | undefined;
  transitNumber?: string | undefined;
  routeNumber?: string | undefined;
  id: string;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  live: boolean;
  createdAt: string;
  updatedAt: string;
  signatureText?: string | undefined;
  signatureImage?: string | undefined;
};

/** @internal */
export const BankAccount$outboundSchema: z.ZodType<
  BankAccount$Outbound,
  z.ZodTypeDef,
  BankAccount
> = z.object({
  object: ObjectT$outboundSchema,
  bankName: z.string(),
  bankPrimaryLine: z.string().optional(),
  bankSecondaryLine: z.string().optional(),
  bankCountryCode: BankAccountCountryCode$outboundSchema,
  accountNumber: z.string(),
  routingNumber: z.string().optional(),
  transitNumber: z.string().optional(),
  routeNumber: z.string().optional(),
  id: z.string(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  live: z.boolean(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  signatureText: z.string().optional(),
  signatureImage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccount$ {
  /** @deprecated use `BankAccount$inboundSchema` instead. */
  export const inboundSchema = BankAccount$inboundSchema;
  /** @deprecated use `BankAccount$outboundSchema` instead. */
  export const outboundSchema = BankAccount$outboundSchema;
  /** @deprecated use `BankAccount$Outbound` instead. */
  export type Outbound = BankAccount$Outbound;
}

export function bankAccountToJSON(bankAccount: BankAccount): string {
  return JSON.stringify(BankAccount$outboundSchema.parse(bankAccount));
}

export function bankAccountFromJSON(
  jsonString: string,
): SafeParseResult<BankAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccount' from JSON`,
  );
}
