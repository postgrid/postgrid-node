/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttachedPDFPlacement,
  AttachedPDFPlacement$inboundSchema,
  AttachedPDFPlacement$outboundSchema,
} from "./attachedpdfplacement.js";

/**
 * Model representing an attached PDF.
 */
export type AttachedPDF = {
  /**
   * The file (multipart form upload) or URL pointing to a PDF for the attached PDF.
   */
  file: string;
  /**
   * The placement of the attached PDF.
   */
  placement: AttachedPDFPlacement;
};

/** @internal */
export const AttachedPDF$inboundSchema: z.ZodType<
  AttachedPDF,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.string(),
  placement: AttachedPDFPlacement$inboundSchema,
});

/** @internal */
export type AttachedPDF$Outbound = {
  file: string;
  placement: string;
};

/** @internal */
export const AttachedPDF$outboundSchema: z.ZodType<
  AttachedPDF$Outbound,
  z.ZodTypeDef,
  AttachedPDF
> = z.object({
  file: z.string(),
  placement: AttachedPDFPlacement$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachedPDF$ {
  /** @deprecated use `AttachedPDF$inboundSchema` instead. */
  export const inboundSchema = AttachedPDF$inboundSchema;
  /** @deprecated use `AttachedPDF$outboundSchema` instead. */
  export const outboundSchema = AttachedPDF$outboundSchema;
  /** @deprecated use `AttachedPDF$Outbound` instead. */
  export type Outbound = AttachedPDF$Outbound;
}

export function attachedPDFToJSON(attachedPDF: AttachedPDF): string {
  return JSON.stringify(AttachedPDF$outboundSchema.parse(attachedPDF));
}

export function attachedPDFFromJSON(
  jsonString: string,
): SafeParseResult<AttachedPDF, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachedPDF$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachedPDF' from JSON`,
  );
}
