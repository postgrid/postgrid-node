/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Contact,
  Contact$inboundSchema,
  Contact$Outbound,
  Contact$outboundSchema,
} from "./contact.js";

/**
 * Model representing a single cheque in "read" mode.
 *
 * @remarks
 * - The "from" and "to" should be fully expanded Contact objects once created.
 */
export type BoxCheque = {
  /**
   * The bank account (ID or reference) from which the cheque amount is drawn.
   */
  bankAccount: string;
  /**
   * The amount on the cheque.
   */
  amount: number;
  /**
   * The memo text on the cheque (optional).
   */
  memo?: string | undefined;
  /**
   * A URL to a logo for the cheque (optional).
   */
  logoURL?: string | undefined;
  /**
   * An optional message template to be printed on or with the cheque.
   */
  messageTemplate?: string | undefined;
  /**
   * The cheque number.
   */
  number: number;
  /**
   * A set of dynamic merge variables for customizing the cheque or accompanying documents (optional).
   */
  mergeVariables?: { [k: string]: any } | undefined;
  from: Contact;
  to: Contact;
};

/** @internal */
export const BoxCheque$inboundSchema: z.ZodType<
  BoxCheque,
  z.ZodTypeDef,
  unknown
> = z.object({
  bankAccount: z.string(),
  amount: z.number().int(),
  memo: z.string().optional(),
  logoURL: z.string().optional(),
  messageTemplate: z.string().optional(),
  number: z.number().int(),
  mergeVariables: z.record(z.any()).optional(),
  from: Contact$inboundSchema,
  to: Contact$inboundSchema,
});

/** @internal */
export type BoxCheque$Outbound = {
  bankAccount: string;
  amount: number;
  memo?: string | undefined;
  logoURL?: string | undefined;
  messageTemplate?: string | undefined;
  number: number;
  mergeVariables?: { [k: string]: any } | undefined;
  from: Contact$Outbound;
  to: Contact$Outbound;
};

/** @internal */
export const BoxCheque$outboundSchema: z.ZodType<
  BoxCheque$Outbound,
  z.ZodTypeDef,
  BoxCheque
> = z.object({
  bankAccount: z.string(),
  amount: z.number().int(),
  memo: z.string().optional(),
  logoURL: z.string().optional(),
  messageTemplate: z.string().optional(),
  number: z.number().int(),
  mergeVariables: z.record(z.any()).optional(),
  from: Contact$outboundSchema,
  to: Contact$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BoxCheque$ {
  /** @deprecated use `BoxCheque$inboundSchema` instead. */
  export const inboundSchema = BoxCheque$inboundSchema;
  /** @deprecated use `BoxCheque$outboundSchema` instead. */
  export const outboundSchema = BoxCheque$outboundSchema;
  /** @deprecated use `BoxCheque$Outbound` instead. */
  export type Outbound = BoxCheque$Outbound;
}

export function boxChequeToJSON(boxCheque: BoxCheque): string {
  return JSON.stringify(BoxCheque$outboundSchema.parse(boxCheque));
}

export function boxChequeFromJSON(
  jsonString: string,
): SafeParseResult<BoxCheque, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BoxCheque$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BoxCheque' from JSON`,
  );
}
