/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContactCreate,
  ContactCreate$inboundSchema,
  ContactCreate$Outbound,
  ContactCreate$outboundSchema,
} from "./contactcreate.js";
import {
  OrderMailingClass,
  OrderMailingClass$inboundSchema,
  OrderMailingClass$outboundSchema,
} from "./ordermailingclass.js";
import {
  PostcardSize,
  PostcardSize$inboundSchema,
  PostcardSize$outboundSchema,
} from "./postcardsize.js";

/**
 * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
 */
export type PostcardCreateWithPDFURLTo = ContactCreate | string;

/**
 * The contact information of the sender. You can pass contact information inline here just like you can for the `to`. Unlike other order types, the sender address is optional for postcards.
 */
export type PostcardCreateWithPDFURLFrom = ContactCreate | string;

export type PostcardCreateWithPDFURL = {
  /**
   * These will be merged with the variables in the template or HTML you create this order with. The keys in this object should match the variable names in the template _exactly_ as they are case-sensitive. Note that these _do not_ apply to PDFs uploaded with the order.
   */
  mergeVariables?: { [k: string]: any } | undefined;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * This order will transition from `ready` to `printing` on the day after this date. You can use this parameter to schedule orders for a future date.
   */
  sendDate?: Date | undefined;
  /**
   * The mailing class of this order. If not provided, automatically set to `first_class`.
   */
  mailingClass?: OrderMailingClass | undefined;
  /**
   * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
   */
  to: ContactCreate | string;
  /**
   * The size of the postcard.
   */
  size: PostcardSize;
  /**
   * The contact information of the sender. You can pass contact information inline here just like you can for the `to`. Unlike other order types, the sender address is optional for postcards.
   */
  from?: ContactCreate | string | undefined;
  /**
   * A URL pointing to a 2 page PDF file. The first page is the front of the postcard and the second page is the back (where the address will be stamped on).
   */
  pdf: string;
};

/** @internal */
export const PostcardCreateWithPDFURLTo$inboundSchema: z.ZodType<
  PostcardCreateWithPDFURLTo,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type PostcardCreateWithPDFURLTo$Outbound =
  | ContactCreate$Outbound
  | string;

/** @internal */
export const PostcardCreateWithPDFURLTo$outboundSchema: z.ZodType<
  PostcardCreateWithPDFURLTo$Outbound,
  z.ZodTypeDef,
  PostcardCreateWithPDFURLTo
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostcardCreateWithPDFURLTo$ {
  /** @deprecated use `PostcardCreateWithPDFURLTo$inboundSchema` instead. */
  export const inboundSchema = PostcardCreateWithPDFURLTo$inboundSchema;
  /** @deprecated use `PostcardCreateWithPDFURLTo$outboundSchema` instead. */
  export const outboundSchema = PostcardCreateWithPDFURLTo$outboundSchema;
  /** @deprecated use `PostcardCreateWithPDFURLTo$Outbound` instead. */
  export type Outbound = PostcardCreateWithPDFURLTo$Outbound;
}

export function postcardCreateWithPDFURLToToJSON(
  postcardCreateWithPDFURLTo: PostcardCreateWithPDFURLTo,
): string {
  return JSON.stringify(
    PostcardCreateWithPDFURLTo$outboundSchema.parse(postcardCreateWithPDFURLTo),
  );
}

export function postcardCreateWithPDFURLToFromJSON(
  jsonString: string,
): SafeParseResult<PostcardCreateWithPDFURLTo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostcardCreateWithPDFURLTo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostcardCreateWithPDFURLTo' from JSON`,
  );
}

/** @internal */
export const PostcardCreateWithPDFURLFrom$inboundSchema: z.ZodType<
  PostcardCreateWithPDFURLFrom,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type PostcardCreateWithPDFURLFrom$Outbound =
  | ContactCreate$Outbound
  | string;

/** @internal */
export const PostcardCreateWithPDFURLFrom$outboundSchema: z.ZodType<
  PostcardCreateWithPDFURLFrom$Outbound,
  z.ZodTypeDef,
  PostcardCreateWithPDFURLFrom
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostcardCreateWithPDFURLFrom$ {
  /** @deprecated use `PostcardCreateWithPDFURLFrom$inboundSchema` instead. */
  export const inboundSchema = PostcardCreateWithPDFURLFrom$inboundSchema;
  /** @deprecated use `PostcardCreateWithPDFURLFrom$outboundSchema` instead. */
  export const outboundSchema = PostcardCreateWithPDFURLFrom$outboundSchema;
  /** @deprecated use `PostcardCreateWithPDFURLFrom$Outbound` instead. */
  export type Outbound = PostcardCreateWithPDFURLFrom$Outbound;
}

export function postcardCreateWithPDFURLFromToJSON(
  postcardCreateWithPDFURLFrom: PostcardCreateWithPDFURLFrom,
): string {
  return JSON.stringify(
    PostcardCreateWithPDFURLFrom$outboundSchema.parse(
      postcardCreateWithPDFURLFrom,
    ),
  );
}

export function postcardCreateWithPDFURLFromFromJSON(
  jsonString: string,
): SafeParseResult<PostcardCreateWithPDFURLFrom, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostcardCreateWithPDFURLFrom$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostcardCreateWithPDFURLFrom' from JSON`,
  );
}

/** @internal */
export const PostcardCreateWithPDFURL$inboundSchema: z.ZodType<
  PostcardCreateWithPDFURL,
  z.ZodTypeDef,
  unknown
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  mailingClass: OrderMailingClass$inboundSchema.optional(),
  to: z.union([ContactCreate$inboundSchema, z.string()]),
  size: PostcardSize$inboundSchema,
  from: z.union([ContactCreate$inboundSchema, z.string()]).optional(),
  pdf: z.string(),
});

/** @internal */
export type PostcardCreateWithPDFURL$Outbound = {
  mergeVariables?: { [k: string]: any } | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  sendDate?: string | undefined;
  mailingClass?: string | undefined;
  to: ContactCreate$Outbound | string;
  size: string;
  from?: ContactCreate$Outbound | string | undefined;
  pdf: string;
};

/** @internal */
export const PostcardCreateWithPDFURL$outboundSchema: z.ZodType<
  PostcardCreateWithPDFURL$Outbound,
  z.ZodTypeDef,
  PostcardCreateWithPDFURL
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.date().transform(v => v.toISOString()).optional(),
  mailingClass: OrderMailingClass$outboundSchema.optional(),
  to: z.union([ContactCreate$outboundSchema, z.string()]),
  size: PostcardSize$outboundSchema,
  from: z.union([ContactCreate$outboundSchema, z.string()]).optional(),
  pdf: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostcardCreateWithPDFURL$ {
  /** @deprecated use `PostcardCreateWithPDFURL$inboundSchema` instead. */
  export const inboundSchema = PostcardCreateWithPDFURL$inboundSchema;
  /** @deprecated use `PostcardCreateWithPDFURL$outboundSchema` instead. */
  export const outboundSchema = PostcardCreateWithPDFURL$outboundSchema;
  /** @deprecated use `PostcardCreateWithPDFURL$Outbound` instead. */
  export type Outbound = PostcardCreateWithPDFURL$Outbound;
}

export function postcardCreateWithPDFURLToJSON(
  postcardCreateWithPDFURL: PostcardCreateWithPDFURL,
): string {
  return JSON.stringify(
    PostcardCreateWithPDFURL$outboundSchema.parse(postcardCreateWithPDFURL),
  );
}

export function postcardCreateWithPDFURLFromJSON(
  jsonString: string,
): SafeParseResult<PostcardCreateWithPDFURL, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostcardCreateWithPDFURL$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostcardCreateWithPDFURL' from JSON`,
  );
}
