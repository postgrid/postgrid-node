/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContactCreate,
  ContactCreate$inboundSchema,
  ContactCreate$Outbound,
  ContactCreate$outboundSchema,
} from "./contactcreate.js";
import {
  OrderMailingClass,
  OrderMailingClass$inboundSchema,
  OrderMailingClass$outboundSchema,
} from "./ordermailingclass.js";
import {
  PostcardSize,
  PostcardSize$inboundSchema,
  PostcardSize$outboundSchema,
} from "./postcardsize.js";

/**
 * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
 */
export type PostcardCreateWithHTMLTo = ContactCreate | string;

/**
 * The contact information of the sender. You can pass contact information inline here just like you can for the `to`. Unlike other order types, the sender address is optional for postcards.
 */
export type PostcardCreateWithHTMLFrom = ContactCreate | string;

export type PostcardCreateWithHTML = {
  /**
   * These will be merged with the variables in the template or HTML you create this order with. The keys in this object should match the variable names in the template _exactly_ as they are case-sensitive. Note that these _do not_ apply to PDFs uploaded with the order.
   */
  mergeVariables?: { [k: string]: any } | undefined;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * This order will transition from `ready` to `printing` on the day after this date. You can use this parameter to schedule orders for a future date.
   */
  sendDate?: Date | undefined;
  /**
   * The mailing class of this order. If not provided, automatically set to `first_class`.
   */
  mailingClass?: OrderMailingClass | undefined;
  /**
   * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
   */
  to: ContactCreate | string;
  /**
   * The size of the postcard.
   */
  size: PostcardSize;
  /**
   * The contact information of the sender. You can pass contact information inline here just like you can for the `to`. Unlike other order types, the sender address is optional for postcards.
   */
  from?: ContactCreate | string | undefined;
  /**
   * The HTML content for the front of the postcard. You can supply _either_ this or `frontTemplate` but not both.
   */
  frontHTML: string;
  /**
   * The HTML content for the back of the postcard. You can supply _either_ this or `backTemplate` but not both.
   */
  backHTML: string;
};

/** @internal */
export const PostcardCreateWithHTMLTo$inboundSchema: z.ZodType<
  PostcardCreateWithHTMLTo,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type PostcardCreateWithHTMLTo$Outbound = ContactCreate$Outbound | string;

/** @internal */
export const PostcardCreateWithHTMLTo$outboundSchema: z.ZodType<
  PostcardCreateWithHTMLTo$Outbound,
  z.ZodTypeDef,
  PostcardCreateWithHTMLTo
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostcardCreateWithHTMLTo$ {
  /** @deprecated use `PostcardCreateWithHTMLTo$inboundSchema` instead. */
  export const inboundSchema = PostcardCreateWithHTMLTo$inboundSchema;
  /** @deprecated use `PostcardCreateWithHTMLTo$outboundSchema` instead. */
  export const outboundSchema = PostcardCreateWithHTMLTo$outboundSchema;
  /** @deprecated use `PostcardCreateWithHTMLTo$Outbound` instead. */
  export type Outbound = PostcardCreateWithHTMLTo$Outbound;
}

export function postcardCreateWithHTMLToToJSON(
  postcardCreateWithHTMLTo: PostcardCreateWithHTMLTo,
): string {
  return JSON.stringify(
    PostcardCreateWithHTMLTo$outboundSchema.parse(postcardCreateWithHTMLTo),
  );
}

export function postcardCreateWithHTMLToFromJSON(
  jsonString: string,
): SafeParseResult<PostcardCreateWithHTMLTo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostcardCreateWithHTMLTo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostcardCreateWithHTMLTo' from JSON`,
  );
}

/** @internal */
export const PostcardCreateWithHTMLFrom$inboundSchema: z.ZodType<
  PostcardCreateWithHTMLFrom,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type PostcardCreateWithHTMLFrom$Outbound =
  | ContactCreate$Outbound
  | string;

/** @internal */
export const PostcardCreateWithHTMLFrom$outboundSchema: z.ZodType<
  PostcardCreateWithHTMLFrom$Outbound,
  z.ZodTypeDef,
  PostcardCreateWithHTMLFrom
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostcardCreateWithHTMLFrom$ {
  /** @deprecated use `PostcardCreateWithHTMLFrom$inboundSchema` instead. */
  export const inboundSchema = PostcardCreateWithHTMLFrom$inboundSchema;
  /** @deprecated use `PostcardCreateWithHTMLFrom$outboundSchema` instead. */
  export const outboundSchema = PostcardCreateWithHTMLFrom$outboundSchema;
  /** @deprecated use `PostcardCreateWithHTMLFrom$Outbound` instead. */
  export type Outbound = PostcardCreateWithHTMLFrom$Outbound;
}

export function postcardCreateWithHTMLFromToJSON(
  postcardCreateWithHTMLFrom: PostcardCreateWithHTMLFrom,
): string {
  return JSON.stringify(
    PostcardCreateWithHTMLFrom$outboundSchema.parse(postcardCreateWithHTMLFrom),
  );
}

export function postcardCreateWithHTMLFromFromJSON(
  jsonString: string,
): SafeParseResult<PostcardCreateWithHTMLFrom, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostcardCreateWithHTMLFrom$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostcardCreateWithHTMLFrom' from JSON`,
  );
}

/** @internal */
export const PostcardCreateWithHTML$inboundSchema: z.ZodType<
  PostcardCreateWithHTML,
  z.ZodTypeDef,
  unknown
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  mailingClass: OrderMailingClass$inboundSchema.optional(),
  to: z.union([ContactCreate$inboundSchema, z.string()]),
  size: PostcardSize$inboundSchema,
  from: z.union([ContactCreate$inboundSchema, z.string()]).optional(),
  frontHTML: z.string(),
  backHTML: z.string(),
});

/** @internal */
export type PostcardCreateWithHTML$Outbound = {
  mergeVariables?: { [k: string]: any } | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  sendDate?: string | undefined;
  mailingClass?: string | undefined;
  to: ContactCreate$Outbound | string;
  size: string;
  from?: ContactCreate$Outbound | string | undefined;
  frontHTML: string;
  backHTML: string;
};

/** @internal */
export const PostcardCreateWithHTML$outboundSchema: z.ZodType<
  PostcardCreateWithHTML$Outbound,
  z.ZodTypeDef,
  PostcardCreateWithHTML
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.date().transform(v => v.toISOString()).optional(),
  mailingClass: OrderMailingClass$outboundSchema.optional(),
  to: z.union([ContactCreate$outboundSchema, z.string()]),
  size: PostcardSize$outboundSchema,
  from: z.union([ContactCreate$outboundSchema, z.string()]).optional(),
  frontHTML: z.string(),
  backHTML: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostcardCreateWithHTML$ {
  /** @deprecated use `PostcardCreateWithHTML$inboundSchema` instead. */
  export const inboundSchema = PostcardCreateWithHTML$inboundSchema;
  /** @deprecated use `PostcardCreateWithHTML$outboundSchema` instead. */
  export const outboundSchema = PostcardCreateWithHTML$outboundSchema;
  /** @deprecated use `PostcardCreateWithHTML$Outbound` instead. */
  export type Outbound = PostcardCreateWithHTML$Outbound;
}

export function postcardCreateWithHTMLToJSON(
  postcardCreateWithHTML: PostcardCreateWithHTML,
): string {
  return JSON.stringify(
    PostcardCreateWithHTML$outboundSchema.parse(postcardCreateWithHTML),
  );
}

export function postcardCreateWithHTMLFromJSON(
  jsonString: string,
): SafeParseResult<PostcardCreateWithHTML, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostcardCreateWithHTML$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostcardCreateWithHTML' from JSON`,
  );
}
