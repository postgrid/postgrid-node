/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Template,
  Template$inboundSchema,
  Template$Outbound,
  Template$outboundSchema,
} from "./template.js";

export const TemplateListObject = {
  List: "list",
} as const;
export type TemplateListObject = ClosedEnum<typeof TemplateListObject>;

export type TemplateList = {
  object: TemplateListObject;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<Template>;
};

/** @internal */
export const TemplateListObject$inboundSchema: z.ZodNativeEnum<
  typeof TemplateListObject
> = z.nativeEnum(TemplateListObject);

/** @internal */
export const TemplateListObject$outboundSchema: z.ZodNativeEnum<
  typeof TemplateListObject
> = TemplateListObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateListObject$ {
  /** @deprecated use `TemplateListObject$inboundSchema` instead. */
  export const inboundSchema = TemplateListObject$inboundSchema;
  /** @deprecated use `TemplateListObject$outboundSchema` instead. */
  export const outboundSchema = TemplateListObject$outboundSchema;
}

/** @internal */
export const TemplateList$inboundSchema: z.ZodType<
  TemplateList,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: TemplateListObject$inboundSchema,
  totalCount: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
  data: z.array(Template$inboundSchema),
});

/** @internal */
export type TemplateList$Outbound = {
  object: string;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<Template$Outbound>;
};

/** @internal */
export const TemplateList$outboundSchema: z.ZodType<
  TemplateList$Outbound,
  z.ZodTypeDef,
  TemplateList
> = z.object({
  object: TemplateListObject$outboundSchema,
  totalCount: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
  data: z.array(Template$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateList$ {
  /** @deprecated use `TemplateList$inboundSchema` instead. */
  export const inboundSchema = TemplateList$inboundSchema;
  /** @deprecated use `TemplateList$outboundSchema` instead. */
  export const outboundSchema = TemplateList$outboundSchema;
  /** @deprecated use `TemplateList$Outbound` instead. */
  export type Outbound = TemplateList$Outbound;
}

export function templateListToJSON(templateList: TemplateList): string {
  return JSON.stringify(TemplateList$outboundSchema.parse(templateList));
}

export function templateListFromJSON(
  jsonString: string,
): SafeParseResult<TemplateList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateList' from JSON`,
  );
}
