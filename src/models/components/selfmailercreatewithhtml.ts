/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContactCreate,
  ContactCreate$inboundSchema,
  ContactCreate$Outbound,
  ContactCreate$outboundSchema,
} from "./contactcreate.js";
import {
  OrderMailingClass,
  OrderMailingClass$inboundSchema,
  OrderMailingClass$outboundSchema,
} from "./ordermailingclass.js";
import {
  SelfMailerSize,
  SelfMailerSize$inboundSchema,
  SelfMailerSize$outboundSchema,
} from "./selfmailersize.js";

/**
 * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
 */
export type SelfMailerCreateWithHTMLTo = ContactCreate | string;

/**
 * The contact information of the sender. You can pass contact information inline here just like you can for the `to`.
 */
export type SelfMailerCreateWithHTMLFrom = ContactCreate | string;

export type SelfMailerCreateWithHTML = {
  /**
   * These will be merged with the variables in the template or HTML you create this order with. The keys in this object should match the variable names in the template _exactly_ as they are case-sensitive. Note that these _do not_ apply to PDFs uploaded with the order.
   */
  mergeVariables?: { [k: string]: any } | undefined;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * This order will transition from `ready` to `printing` on the day after this date. You can use this parameter to schedule orders for a future date.
   */
  sendDate?: Date | undefined;
  /**
   * The mailing class of this order. If not provided, automatically set to `first_class`.
   */
  mailingClass?: OrderMailingClass | undefined;
  /**
   * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
   */
  to: ContactCreate | string;
  /**
   * The size of the self-mailer.
   */
  size: SelfMailerSize;
  /**
   * The contact information of the sender. You can pass contact information inline here just like you can for the `to`.
   */
  from: ContactCreate | string;
  /**
   * The HTML content for the inside of the self-mailer. You can supply _either_ this or `insideTemplate` but not both.
   */
  insideHTML: string;
  /**
   * The HTML content for the outside of the self-mailer. You can supply _either_ this or `outsideTemplate` but not both.
   */
  outsideHTML: string;
};

/** @internal */
export const SelfMailerCreateWithHTMLTo$inboundSchema: z.ZodType<
  SelfMailerCreateWithHTMLTo,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type SelfMailerCreateWithHTMLTo$Outbound =
  | ContactCreate$Outbound
  | string;

/** @internal */
export const SelfMailerCreateWithHTMLTo$outboundSchema: z.ZodType<
  SelfMailerCreateWithHTMLTo$Outbound,
  z.ZodTypeDef,
  SelfMailerCreateWithHTMLTo
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelfMailerCreateWithHTMLTo$ {
  /** @deprecated use `SelfMailerCreateWithHTMLTo$inboundSchema` instead. */
  export const inboundSchema = SelfMailerCreateWithHTMLTo$inboundSchema;
  /** @deprecated use `SelfMailerCreateWithHTMLTo$outboundSchema` instead. */
  export const outboundSchema = SelfMailerCreateWithHTMLTo$outboundSchema;
  /** @deprecated use `SelfMailerCreateWithHTMLTo$Outbound` instead. */
  export type Outbound = SelfMailerCreateWithHTMLTo$Outbound;
}

export function selfMailerCreateWithHTMLToToJSON(
  selfMailerCreateWithHTMLTo: SelfMailerCreateWithHTMLTo,
): string {
  return JSON.stringify(
    SelfMailerCreateWithHTMLTo$outboundSchema.parse(selfMailerCreateWithHTMLTo),
  );
}

export function selfMailerCreateWithHTMLToFromJSON(
  jsonString: string,
): SafeParseResult<SelfMailerCreateWithHTMLTo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelfMailerCreateWithHTMLTo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelfMailerCreateWithHTMLTo' from JSON`,
  );
}

/** @internal */
export const SelfMailerCreateWithHTMLFrom$inboundSchema: z.ZodType<
  SelfMailerCreateWithHTMLFrom,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type SelfMailerCreateWithHTMLFrom$Outbound =
  | ContactCreate$Outbound
  | string;

/** @internal */
export const SelfMailerCreateWithHTMLFrom$outboundSchema: z.ZodType<
  SelfMailerCreateWithHTMLFrom$Outbound,
  z.ZodTypeDef,
  SelfMailerCreateWithHTMLFrom
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelfMailerCreateWithHTMLFrom$ {
  /** @deprecated use `SelfMailerCreateWithHTMLFrom$inboundSchema` instead. */
  export const inboundSchema = SelfMailerCreateWithHTMLFrom$inboundSchema;
  /** @deprecated use `SelfMailerCreateWithHTMLFrom$outboundSchema` instead. */
  export const outboundSchema = SelfMailerCreateWithHTMLFrom$outboundSchema;
  /** @deprecated use `SelfMailerCreateWithHTMLFrom$Outbound` instead. */
  export type Outbound = SelfMailerCreateWithHTMLFrom$Outbound;
}

export function selfMailerCreateWithHTMLFromToJSON(
  selfMailerCreateWithHTMLFrom: SelfMailerCreateWithHTMLFrom,
): string {
  return JSON.stringify(
    SelfMailerCreateWithHTMLFrom$outboundSchema.parse(
      selfMailerCreateWithHTMLFrom,
    ),
  );
}

export function selfMailerCreateWithHTMLFromFromJSON(
  jsonString: string,
): SafeParseResult<SelfMailerCreateWithHTMLFrom, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelfMailerCreateWithHTMLFrom$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelfMailerCreateWithHTMLFrom' from JSON`,
  );
}

/** @internal */
export const SelfMailerCreateWithHTML$inboundSchema: z.ZodType<
  SelfMailerCreateWithHTML,
  z.ZodTypeDef,
  unknown
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  mailingClass: OrderMailingClass$inboundSchema.optional(),
  to: z.union([ContactCreate$inboundSchema, z.string()]),
  size: SelfMailerSize$inboundSchema,
  from: z.union([ContactCreate$inboundSchema, z.string()]),
  insideHTML: z.string(),
  outsideHTML: z.string(),
});

/** @internal */
export type SelfMailerCreateWithHTML$Outbound = {
  mergeVariables?: { [k: string]: any } | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  sendDate?: string | undefined;
  mailingClass?: string | undefined;
  to: ContactCreate$Outbound | string;
  size: string;
  from: ContactCreate$Outbound | string;
  insideHTML: string;
  outsideHTML: string;
};

/** @internal */
export const SelfMailerCreateWithHTML$outboundSchema: z.ZodType<
  SelfMailerCreateWithHTML$Outbound,
  z.ZodTypeDef,
  SelfMailerCreateWithHTML
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.date().transform(v => v.toISOString()).optional(),
  mailingClass: OrderMailingClass$outboundSchema.optional(),
  to: z.union([ContactCreate$outboundSchema, z.string()]),
  size: SelfMailerSize$outboundSchema,
  from: z.union([ContactCreate$outboundSchema, z.string()]),
  insideHTML: z.string(),
  outsideHTML: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelfMailerCreateWithHTML$ {
  /** @deprecated use `SelfMailerCreateWithHTML$inboundSchema` instead. */
  export const inboundSchema = SelfMailerCreateWithHTML$inboundSchema;
  /** @deprecated use `SelfMailerCreateWithHTML$outboundSchema` instead. */
  export const outboundSchema = SelfMailerCreateWithHTML$outboundSchema;
  /** @deprecated use `SelfMailerCreateWithHTML$Outbound` instead. */
  export type Outbound = SelfMailerCreateWithHTML$Outbound;
}

export function selfMailerCreateWithHTMLToJSON(
  selfMailerCreateWithHTML: SelfMailerCreateWithHTML,
): string {
  return JSON.stringify(
    SelfMailerCreateWithHTML$outboundSchema.parse(selfMailerCreateWithHTML),
  );
}

export function selfMailerCreateWithHTMLFromJSON(
  jsonString: string,
): SafeParseResult<SelfMailerCreateWithHTML, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelfMailerCreateWithHTML$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelfMailerCreateWithHTML' from JSON`,
  );
}
