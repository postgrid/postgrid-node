/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttachedPDF,
  AttachedPDF$inboundSchema,
  AttachedPDF$Outbound,
  AttachedPDF$outboundSchema,
} from "./attachedpdf.js";
import {
  ContactCreate,
  ContactCreate$inboundSchema,
  ContactCreate$Outbound,
  ContactCreate$outboundSchema,
} from "./contactcreate.js";
import {
  OrderMailingClass,
  OrderMailingClass$inboundSchema,
  OrderMailingClass$outboundSchema,
} from "./ordermailingclass.js";
import {
  PlasticCard,
  PlasticCard$inboundSchema,
  PlasticCard$Outbound,
  PlasticCard$outboundSchema,
} from "./plasticcard.js";

/**
 * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
 */
export type LetterCreateWithHTMLTo = ContactCreate | string;

/**
 * The contact information of the sender. You can pass contact information inline here just like you can for the `to`.
 */
export type LetterCreateWithHTMLFrom = ContactCreate | string;

/**
 * The size of the letter.
 */
export const LetterCreateWithHTMLSize = {
  UsLetter: "us_letter",
  A4: "a4",
} as const;
/**
 * The size of the letter.
 */
export type LetterCreateWithHTMLSize = ClosedEnum<
  typeof LetterCreateWithHTMLSize
>;

/**
 * The placement of the address on the letter.
 */
export const LetterCreateWithHTMLAddressPlacement = {
  TopFirstPage: "top_first_page",
  InsertBlankPage: "insert_blank_page",
} as const;
/**
 * The placement of the address on the letter.
 */
export type LetterCreateWithHTMLAddressPlacement = ClosedEnum<
  typeof LetterCreateWithHTMLAddressPlacement
>;

export type LetterCreateWithHTML = {
  /**
   * These will be merged with the variables in the template or HTML you create this order with. The keys in this object should match the variable names in the template _exactly_ as they are case-sensitive. Note that these _do not_ apply to PDFs uploaded with the order.
   */
  mergeVariables?: { [k: string]: any } | undefined;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * This order will transition from `ready` to `printing` on the day after this date. You can use this parameter to schedule orders for a future date.
   */
  sendDate?: Date | undefined;
  /**
   * The mailing class of this order. If not provided, automatically set to `first_class`.
   */
  mailingClass?: OrderMailingClass | undefined;
  /**
   * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
   */
  to: ContactCreate | string;
  /**
   * If specified, indicates which letter page is perforated. Currently, only the first page can be perforated.
   */
  perforatedPage?: number | undefined;
  /**
   * The return envelope (ID) sent out with the letter, if any.
   */
  returnEnvelope?: string | undefined;
  /**
   * You can attach a PDF to the content you supply for this letter. This is useful if you have some stati
   */
  attachedPDF?: AttachedPDF | undefined;
  /**
   * The plastic card sent out with the letter, if any.
   */
  plasticCard?: PlasticCard | undefined;
  /**
   * Indicates if the letter is double-sided.
   */
  doubleSided?: boolean | undefined;
  /**
   * Indicates if the letter is in color.
   */
  color?: boolean | undefined;
  /**
   * The contact information of the sender. You can pass contact information inline here just like you can for the `to`.
   */
  from: ContactCreate | string;
  /**
   * The size of the letter.
   */
  size?: LetterCreateWithHTMLSize | undefined;
  /**
   * The placement of the address on the letter.
   */
  addressPlacement?: LetterCreateWithHTMLAddressPlacement | undefined;
  /**
   * The envelope (ID) for the letter. You can either specify a custom envelope ID or use the default `standard` envelope.
   */
  envelope?: string | undefined;
  /**
   * The HTML content for the letter. You can supply _either_ this or `template` but not both.
   */
  html: string;
};

/** @internal */
export const LetterCreateWithHTMLTo$inboundSchema: z.ZodType<
  LetterCreateWithHTMLTo,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type LetterCreateWithHTMLTo$Outbound = ContactCreate$Outbound | string;

/** @internal */
export const LetterCreateWithHTMLTo$outboundSchema: z.ZodType<
  LetterCreateWithHTMLTo$Outbound,
  z.ZodTypeDef,
  LetterCreateWithHTMLTo
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterCreateWithHTMLTo$ {
  /** @deprecated use `LetterCreateWithHTMLTo$inboundSchema` instead. */
  export const inboundSchema = LetterCreateWithHTMLTo$inboundSchema;
  /** @deprecated use `LetterCreateWithHTMLTo$outboundSchema` instead. */
  export const outboundSchema = LetterCreateWithHTMLTo$outboundSchema;
  /** @deprecated use `LetterCreateWithHTMLTo$Outbound` instead. */
  export type Outbound = LetterCreateWithHTMLTo$Outbound;
}

export function letterCreateWithHTMLToToJSON(
  letterCreateWithHTMLTo: LetterCreateWithHTMLTo,
): string {
  return JSON.stringify(
    LetterCreateWithHTMLTo$outboundSchema.parse(letterCreateWithHTMLTo),
  );
}

export function letterCreateWithHTMLToFromJSON(
  jsonString: string,
): SafeParseResult<LetterCreateWithHTMLTo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LetterCreateWithHTMLTo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LetterCreateWithHTMLTo' from JSON`,
  );
}

/** @internal */
export const LetterCreateWithHTMLFrom$inboundSchema: z.ZodType<
  LetterCreateWithHTMLFrom,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type LetterCreateWithHTMLFrom$Outbound = ContactCreate$Outbound | string;

/** @internal */
export const LetterCreateWithHTMLFrom$outboundSchema: z.ZodType<
  LetterCreateWithHTMLFrom$Outbound,
  z.ZodTypeDef,
  LetterCreateWithHTMLFrom
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterCreateWithHTMLFrom$ {
  /** @deprecated use `LetterCreateWithHTMLFrom$inboundSchema` instead. */
  export const inboundSchema = LetterCreateWithHTMLFrom$inboundSchema;
  /** @deprecated use `LetterCreateWithHTMLFrom$outboundSchema` instead. */
  export const outboundSchema = LetterCreateWithHTMLFrom$outboundSchema;
  /** @deprecated use `LetterCreateWithHTMLFrom$Outbound` instead. */
  export type Outbound = LetterCreateWithHTMLFrom$Outbound;
}

export function letterCreateWithHTMLFromToJSON(
  letterCreateWithHTMLFrom: LetterCreateWithHTMLFrom,
): string {
  return JSON.stringify(
    LetterCreateWithHTMLFrom$outboundSchema.parse(letterCreateWithHTMLFrom),
  );
}

export function letterCreateWithHTMLFromFromJSON(
  jsonString: string,
): SafeParseResult<LetterCreateWithHTMLFrom, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LetterCreateWithHTMLFrom$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LetterCreateWithHTMLFrom' from JSON`,
  );
}

/** @internal */
export const LetterCreateWithHTMLSize$inboundSchema: z.ZodNativeEnum<
  typeof LetterCreateWithHTMLSize
> = z.nativeEnum(LetterCreateWithHTMLSize);

/** @internal */
export const LetterCreateWithHTMLSize$outboundSchema: z.ZodNativeEnum<
  typeof LetterCreateWithHTMLSize
> = LetterCreateWithHTMLSize$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterCreateWithHTMLSize$ {
  /** @deprecated use `LetterCreateWithHTMLSize$inboundSchema` instead. */
  export const inboundSchema = LetterCreateWithHTMLSize$inboundSchema;
  /** @deprecated use `LetterCreateWithHTMLSize$outboundSchema` instead. */
  export const outboundSchema = LetterCreateWithHTMLSize$outboundSchema;
}

/** @internal */
export const LetterCreateWithHTMLAddressPlacement$inboundSchema:
  z.ZodNativeEnum<typeof LetterCreateWithHTMLAddressPlacement> = z.nativeEnum(
    LetterCreateWithHTMLAddressPlacement,
  );

/** @internal */
export const LetterCreateWithHTMLAddressPlacement$outboundSchema:
  z.ZodNativeEnum<typeof LetterCreateWithHTMLAddressPlacement> =
    LetterCreateWithHTMLAddressPlacement$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterCreateWithHTMLAddressPlacement$ {
  /** @deprecated use `LetterCreateWithHTMLAddressPlacement$inboundSchema` instead. */
  export const inboundSchema =
    LetterCreateWithHTMLAddressPlacement$inboundSchema;
  /** @deprecated use `LetterCreateWithHTMLAddressPlacement$outboundSchema` instead. */
  export const outboundSchema =
    LetterCreateWithHTMLAddressPlacement$outboundSchema;
}

/** @internal */
export const LetterCreateWithHTML$inboundSchema: z.ZodType<
  LetterCreateWithHTML,
  z.ZodTypeDef,
  unknown
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  mailingClass: OrderMailingClass$inboundSchema.optional(),
  to: z.union([ContactCreate$inboundSchema, z.string()]),
  perforatedPage: z.number().optional(),
  returnEnvelope: z.string().optional(),
  attachedPDF: AttachedPDF$inboundSchema.optional(),
  plasticCard: PlasticCard$inboundSchema.optional(),
  doubleSided: z.boolean().default(false),
  color: z.boolean().default(false),
  from: z.union([ContactCreate$inboundSchema, z.string()]),
  size: LetterCreateWithHTMLSize$inboundSchema.default("us_letter"),
  addressPlacement: LetterCreateWithHTMLAddressPlacement$inboundSchema.default(
    "top_first_page",
  ),
  envelope: z.string().default("standard"),
  html: z.string(),
});

/** @internal */
export type LetterCreateWithHTML$Outbound = {
  mergeVariables?: { [k: string]: any } | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  sendDate?: string | undefined;
  mailingClass?: string | undefined;
  to: ContactCreate$Outbound | string;
  perforatedPage?: number | undefined;
  returnEnvelope?: string | undefined;
  attachedPDF?: AttachedPDF$Outbound | undefined;
  plasticCard?: PlasticCard$Outbound | undefined;
  doubleSided: boolean;
  color: boolean;
  from: ContactCreate$Outbound | string;
  size: string;
  addressPlacement: string;
  envelope: string;
  html: string;
};

/** @internal */
export const LetterCreateWithHTML$outboundSchema: z.ZodType<
  LetterCreateWithHTML$Outbound,
  z.ZodTypeDef,
  LetterCreateWithHTML
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.date().transform(v => v.toISOString()).optional(),
  mailingClass: OrderMailingClass$outboundSchema.optional(),
  to: z.union([ContactCreate$outboundSchema, z.string()]),
  perforatedPage: z.number().optional(),
  returnEnvelope: z.string().optional(),
  attachedPDF: AttachedPDF$outboundSchema.optional(),
  plasticCard: PlasticCard$outboundSchema.optional(),
  doubleSided: z.boolean().default(false),
  color: z.boolean().default(false),
  from: z.union([ContactCreate$outboundSchema, z.string()]),
  size: LetterCreateWithHTMLSize$outboundSchema.default("us_letter"),
  addressPlacement: LetterCreateWithHTMLAddressPlacement$outboundSchema.default(
    "top_first_page",
  ),
  envelope: z.string().default("standard"),
  html: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterCreateWithHTML$ {
  /** @deprecated use `LetterCreateWithHTML$inboundSchema` instead. */
  export const inboundSchema = LetterCreateWithHTML$inboundSchema;
  /** @deprecated use `LetterCreateWithHTML$outboundSchema` instead. */
  export const outboundSchema = LetterCreateWithHTML$outboundSchema;
  /** @deprecated use `LetterCreateWithHTML$Outbound` instead. */
  export type Outbound = LetterCreateWithHTML$Outbound;
}

export function letterCreateWithHTMLToJSON(
  letterCreateWithHTML: LetterCreateWithHTML,
): string {
  return JSON.stringify(
    LetterCreateWithHTML$outboundSchema.parse(letterCreateWithHTML),
  );
}

export function letterCreateWithHTMLFromJSON(
  jsonString: string,
): SafeParseResult<LetterCreateWithHTML, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LetterCreateWithHTML$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LetterCreateWithHTML' from JSON`,
  );
}
