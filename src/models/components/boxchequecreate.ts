/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContactCreate,
  ContactCreate$inboundSchema,
  ContactCreate$Outbound,
  ContactCreate$outboundSchema,
} from "./contactcreate.js";

export type BoxChequeCreateFrom = ContactCreate | string;

export type BoxChequeCreateTo = ContactCreate | string;

/**
 * Model representing a single cheque in "create" mode.
 *
 * @remarks
 * - The "from" and "to" can be ContactCreate objects (inline) or string contactIDs.
 */
export type BoxChequeCreate = {
  /**
   * The bank account (ID or reference) from which the cheque amount is drawn.
   */
  bankAccount: string;
  /**
   * The amount on the cheque.
   */
  amount: number;
  /**
   * The memo text on the cheque (optional).
   */
  memo?: string | undefined;
  /**
   * A URL to a logo for the cheque (optional).
   */
  logoURL?: string | undefined;
  /**
   * An optional message template to be printed on or with the cheque.
   */
  messageTemplate?: string | undefined;
  /**
   * The cheque number.
   */
  number: number;
  /**
   * A set of dynamic merge variables for customizing the cheque or accompanying documents (optional).
   */
  mergeVariables?: { [k: string]: any } | undefined;
  from: ContactCreate | string;
  to: ContactCreate | string;
};

/** @internal */
export const BoxChequeCreateFrom$inboundSchema: z.ZodType<
  BoxChequeCreateFrom,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type BoxChequeCreateFrom$Outbound = ContactCreate$Outbound | string;

/** @internal */
export const BoxChequeCreateFrom$outboundSchema: z.ZodType<
  BoxChequeCreateFrom$Outbound,
  z.ZodTypeDef,
  BoxChequeCreateFrom
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BoxChequeCreateFrom$ {
  /** @deprecated use `BoxChequeCreateFrom$inboundSchema` instead. */
  export const inboundSchema = BoxChequeCreateFrom$inboundSchema;
  /** @deprecated use `BoxChequeCreateFrom$outboundSchema` instead. */
  export const outboundSchema = BoxChequeCreateFrom$outboundSchema;
  /** @deprecated use `BoxChequeCreateFrom$Outbound` instead. */
  export type Outbound = BoxChequeCreateFrom$Outbound;
}

export function boxChequeCreateFromToJSON(
  boxChequeCreateFrom: BoxChequeCreateFrom,
): string {
  return JSON.stringify(
    BoxChequeCreateFrom$outboundSchema.parse(boxChequeCreateFrom),
  );
}

export function boxChequeCreateFromFromJSON(
  jsonString: string,
): SafeParseResult<BoxChequeCreateFrom, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BoxChequeCreateFrom$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BoxChequeCreateFrom' from JSON`,
  );
}

/** @internal */
export const BoxChequeCreateTo$inboundSchema: z.ZodType<
  BoxChequeCreateTo,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type BoxChequeCreateTo$Outbound = ContactCreate$Outbound | string;

/** @internal */
export const BoxChequeCreateTo$outboundSchema: z.ZodType<
  BoxChequeCreateTo$Outbound,
  z.ZodTypeDef,
  BoxChequeCreateTo
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BoxChequeCreateTo$ {
  /** @deprecated use `BoxChequeCreateTo$inboundSchema` instead. */
  export const inboundSchema = BoxChequeCreateTo$inboundSchema;
  /** @deprecated use `BoxChequeCreateTo$outboundSchema` instead. */
  export const outboundSchema = BoxChequeCreateTo$outboundSchema;
  /** @deprecated use `BoxChequeCreateTo$Outbound` instead. */
  export type Outbound = BoxChequeCreateTo$Outbound;
}

export function boxChequeCreateToToJSON(
  boxChequeCreateTo: BoxChequeCreateTo,
): string {
  return JSON.stringify(
    BoxChequeCreateTo$outboundSchema.parse(boxChequeCreateTo),
  );
}

export function boxChequeCreateToFromJSON(
  jsonString: string,
): SafeParseResult<BoxChequeCreateTo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BoxChequeCreateTo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BoxChequeCreateTo' from JSON`,
  );
}

/** @internal */
export const BoxChequeCreate$inboundSchema: z.ZodType<
  BoxChequeCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  bankAccount: z.string(),
  amount: z.number().int(),
  memo: z.string().optional(),
  logoURL: z.string().optional(),
  messageTemplate: z.string().optional(),
  number: z.number().int(),
  mergeVariables: z.record(z.any()).optional(),
  from: z.union([ContactCreate$inboundSchema, z.string()]),
  to: z.union([ContactCreate$inboundSchema, z.string()]),
});

/** @internal */
export type BoxChequeCreate$Outbound = {
  bankAccount: string;
  amount: number;
  memo?: string | undefined;
  logoURL?: string | undefined;
  messageTemplate?: string | undefined;
  number: number;
  mergeVariables?: { [k: string]: any } | undefined;
  from: ContactCreate$Outbound | string;
  to: ContactCreate$Outbound | string;
};

/** @internal */
export const BoxChequeCreate$outboundSchema: z.ZodType<
  BoxChequeCreate$Outbound,
  z.ZodTypeDef,
  BoxChequeCreate
> = z.object({
  bankAccount: z.string(),
  amount: z.number().int(),
  memo: z.string().optional(),
  logoURL: z.string().optional(),
  messageTemplate: z.string().optional(),
  number: z.number().int(),
  mergeVariables: z.record(z.any()).optional(),
  from: z.union([ContactCreate$outboundSchema, z.string()]),
  to: z.union([ContactCreate$outboundSchema, z.string()]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BoxChequeCreate$ {
  /** @deprecated use `BoxChequeCreate$inboundSchema` instead. */
  export const inboundSchema = BoxChequeCreate$inboundSchema;
  /** @deprecated use `BoxChequeCreate$outboundSchema` instead. */
  export const outboundSchema = BoxChequeCreate$outboundSchema;
  /** @deprecated use `BoxChequeCreate$Outbound` instead. */
  export type Outbound = BoxChequeCreate$Outbound;
}

export function boxChequeCreateToJSON(
  boxChequeCreate: BoxChequeCreate,
): string {
  return JSON.stringify(BoxChequeCreate$outboundSchema.parse(boxChequeCreate));
}

export function boxChequeCreateFromJSON(
  jsonString: string,
): SafeParseResult<BoxChequeCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BoxChequeCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BoxChequeCreate' from JSON`,
  );
}
