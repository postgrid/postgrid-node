/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BoxChequeCreate,
  BoxChequeCreate$inboundSchema,
  BoxChequeCreate$Outbound,
  BoxChequeCreate$outboundSchema,
} from "./boxchequecreate.js";
import {
  ContactCreate,
  ContactCreate$inboundSchema,
  ContactCreate$Outbound,
  ContactCreate$outboundSchema,
} from "./contactcreate.js";
import {
  OrderMailingClass,
  OrderMailingClass$inboundSchema,
  OrderMailingClass$outboundSchema,
} from "./ordermailingclass.js";

/**
 * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
 */
export type To = ContactCreate | string;

/**
 * The 'from' (sender) of the entire box. Accepts inline ContactCreate or a contactID.
 */
export type From = ContactCreate | string;

export type BoxCreate = {
  /**
   * These will be merged with the variables in the template or HTML you create this order with. The keys in this object should match the variable names in the template _exactly_ as they are case-sensitive. Note that these _do not_ apply to PDFs uploaded with the order.
   */
  mergeVariables?: { [k: string]: any } | undefined;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * This order will transition from `ready` to `printing` on the day after this date. You can use this parameter to schedule orders for a future date.
   */
  sendDate?: Date | undefined;
  /**
   * The mailing class of this order. If not provided, automatically set to `first_class`.
   */
  mailingClass?: OrderMailingClass | undefined;
  /**
   * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
   */
  to: ContactCreate | string;
  /**
   * The 'from' (sender) of the entire box. Accepts inline ContactCreate or a contactID.
   */
  from: ContactCreate | string;
  /**
   * The cheques to be mailed in the box. Only 100 cheques can be included in a box at a time.
   */
  cheques: Array<BoxChequeCreate>;
};

/** @internal */
export const To$inboundSchema: z.ZodType<To, z.ZodTypeDef, unknown> = z.union([
  ContactCreate$inboundSchema,
  z.string(),
]);

/** @internal */
export type To$Outbound = ContactCreate$Outbound | string;

/** @internal */
export const To$outboundSchema: z.ZodType<To$Outbound, z.ZodTypeDef, To> = z
  .union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace To$ {
  /** @deprecated use `To$inboundSchema` instead. */
  export const inboundSchema = To$inboundSchema;
  /** @deprecated use `To$outboundSchema` instead. */
  export const outboundSchema = To$outboundSchema;
  /** @deprecated use `To$Outbound` instead. */
  export type Outbound = To$Outbound;
}

export function toToJSON(to: To): string {
  return JSON.stringify(To$outboundSchema.parse(to));
}

export function toFromJSON(
  jsonString: string,
): SafeParseResult<To, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => To$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'To' from JSON`,
  );
}

/** @internal */
export const From$inboundSchema: z.ZodType<From, z.ZodTypeDef, unknown> = z
  .union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type From$Outbound = ContactCreate$Outbound | string;

/** @internal */
export const From$outboundSchema: z.ZodType<From$Outbound, z.ZodTypeDef, From> =
  z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace From$ {
  /** @deprecated use `From$inboundSchema` instead. */
  export const inboundSchema = From$inboundSchema;
  /** @deprecated use `From$outboundSchema` instead. */
  export const outboundSchema = From$outboundSchema;
  /** @deprecated use `From$Outbound` instead. */
  export type Outbound = From$Outbound;
}

export function fromToJSON(from: From): string {
  return JSON.stringify(From$outboundSchema.parse(from));
}

export function fromFromJSON(
  jsonString: string,
): SafeParseResult<From, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => From$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'From' from JSON`,
  );
}

/** @internal */
export const BoxCreate$inboundSchema: z.ZodType<
  BoxCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  mailingClass: OrderMailingClass$inboundSchema.optional(),
  to: z.union([ContactCreate$inboundSchema, z.string()]),
  from: z.union([ContactCreate$inboundSchema, z.string()]),
  cheques: z.array(BoxChequeCreate$inboundSchema),
});

/** @internal */
export type BoxCreate$Outbound = {
  mergeVariables?: { [k: string]: any } | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  sendDate?: string | undefined;
  mailingClass?: string | undefined;
  to: ContactCreate$Outbound | string;
  from: ContactCreate$Outbound | string;
  cheques: Array<BoxChequeCreate$Outbound>;
};

/** @internal */
export const BoxCreate$outboundSchema: z.ZodType<
  BoxCreate$Outbound,
  z.ZodTypeDef,
  BoxCreate
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.date().transform(v => v.toISOString()).optional(),
  mailingClass: OrderMailingClass$outboundSchema.optional(),
  to: z.union([ContactCreate$outboundSchema, z.string()]),
  from: z.union([ContactCreate$outboundSchema, z.string()]),
  cheques: z.array(BoxChequeCreate$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BoxCreate$ {
  /** @deprecated use `BoxCreate$inboundSchema` instead. */
  export const inboundSchema = BoxCreate$inboundSchema;
  /** @deprecated use `BoxCreate$outboundSchema` instead. */
  export const outboundSchema = BoxCreate$outboundSchema;
  /** @deprecated use `BoxCreate$Outbound` instead. */
  export type Outbound = BoxCreate$Outbound;
}

export function boxCreateToJSON(boxCreate: BoxCreate): string {
  return JSON.stringify(BoxCreate$outboundSchema.parse(boxCreate));
}

export function boxCreateFromJSON(
  jsonString: string,
): SafeParseResult<BoxCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BoxCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BoxCreate' from JSON`,
  );
}
