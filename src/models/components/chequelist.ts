/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Cheque,
  Cheque$inboundSchema,
  Cheque$Outbound,
  Cheque$outboundSchema,
} from "./cheque.js";

export const ChequeListObject = {
  List: "list",
} as const;
export type ChequeListObject = ClosedEnum<typeof ChequeListObject>;

export type ChequeList = {
  object: ChequeListObject;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<Cheque>;
};

/** @internal */
export const ChequeListObject$inboundSchema: z.ZodNativeEnum<
  typeof ChequeListObject
> = z.nativeEnum(ChequeListObject);

/** @internal */
export const ChequeListObject$outboundSchema: z.ZodNativeEnum<
  typeof ChequeListObject
> = ChequeListObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChequeListObject$ {
  /** @deprecated use `ChequeListObject$inboundSchema` instead. */
  export const inboundSchema = ChequeListObject$inboundSchema;
  /** @deprecated use `ChequeListObject$outboundSchema` instead. */
  export const outboundSchema = ChequeListObject$outboundSchema;
}

/** @internal */
export const ChequeList$inboundSchema: z.ZodType<
  ChequeList,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ChequeListObject$inboundSchema,
  totalCount: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
  data: z.array(Cheque$inboundSchema),
});

/** @internal */
export type ChequeList$Outbound = {
  object: string;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<Cheque$Outbound>;
};

/** @internal */
export const ChequeList$outboundSchema: z.ZodType<
  ChequeList$Outbound,
  z.ZodTypeDef,
  ChequeList
> = z.object({
  object: ChequeListObject$outboundSchema,
  totalCount: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
  data: z.array(Cheque$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChequeList$ {
  /** @deprecated use `ChequeList$inboundSchema` instead. */
  export const inboundSchema = ChequeList$inboundSchema;
  /** @deprecated use `ChequeList$outboundSchema` instead. */
  export const outboundSchema = ChequeList$outboundSchema;
  /** @deprecated use `ChequeList$Outbound` instead. */
  export type Outbound = ChequeList$Outbound;
}

export function chequeListToJSON(chequeList: ChequeList): string {
  return JSON.stringify(ChequeList$outboundSchema.parse(chequeList));
}

export function chequeListFromJSON(
  jsonString: string,
): SafeParseResult<ChequeList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChequeList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChequeList' from JSON`,
  );
}
