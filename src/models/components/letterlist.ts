/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Letter,
  Letter$inboundSchema,
  Letter$Outbound,
  Letter$outboundSchema,
} from "./letter.js";

export const LetterListObject = {
  List: "list",
} as const;
export type LetterListObject = ClosedEnum<typeof LetterListObject>;

export type LetterList = {
  object: LetterListObject;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<Letter>;
};

/** @internal */
export const LetterListObject$inboundSchema: z.ZodNativeEnum<
  typeof LetterListObject
> = z.nativeEnum(LetterListObject);

/** @internal */
export const LetterListObject$outboundSchema: z.ZodNativeEnum<
  typeof LetterListObject
> = LetterListObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterListObject$ {
  /** @deprecated use `LetterListObject$inboundSchema` instead. */
  export const inboundSchema = LetterListObject$inboundSchema;
  /** @deprecated use `LetterListObject$outboundSchema` instead. */
  export const outboundSchema = LetterListObject$outboundSchema;
}

/** @internal */
export const LetterList$inboundSchema: z.ZodType<
  LetterList,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: LetterListObject$inboundSchema,
  totalCount: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
  data: z.array(Letter$inboundSchema),
});

/** @internal */
export type LetterList$Outbound = {
  object: string;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<Letter$Outbound>;
};

/** @internal */
export const LetterList$outboundSchema: z.ZodType<
  LetterList$Outbound,
  z.ZodTypeDef,
  LetterList
> = z.object({
  object: LetterListObject$outboundSchema,
  totalCount: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
  data: z.array(Letter$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterList$ {
  /** @deprecated use `LetterList$inboundSchema` instead. */
  export const inboundSchema = LetterList$inboundSchema;
  /** @deprecated use `LetterList$outboundSchema` instead. */
  export const outboundSchema = LetterList$outboundSchema;
  /** @deprecated use `LetterList$Outbound` instead. */
  export type Outbound = LetterList$Outbound;
}

export function letterListToJSON(letterList: LetterList): string {
  return JSON.stringify(LetterList$outboundSchema.parse(letterList));
}

export function letterListFromJSON(
  jsonString: string,
): SafeParseResult<LetterList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LetterList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LetterList' from JSON`,
  );
}
