/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContactCreateWithCompanyName,
  ContactCreateWithCompanyName$inboundSchema,
  ContactCreateWithCompanyName$Outbound,
  ContactCreateWithCompanyName$outboundSchema,
} from "./contactcreatewithcompanyname.js";
import {
  ContactCreateWithFirstName,
  ContactCreateWithFirstName$inboundSchema,
  ContactCreateWithFirstName$Outbound,
  ContactCreateWithFirstName$outboundSchema,
} from "./contactcreatewithfirstname.js";

export type ContactCreate =
  | ContactCreateWithFirstName
  | ContactCreateWithCompanyName;

/** @internal */
export const ContactCreate$inboundSchema: z.ZodType<
  ContactCreate,
  z.ZodTypeDef,
  unknown
> = z.union([
  ContactCreateWithFirstName$inboundSchema,
  ContactCreateWithCompanyName$inboundSchema,
]);

/** @internal */
export type ContactCreate$Outbound =
  | ContactCreateWithFirstName$Outbound
  | ContactCreateWithCompanyName$Outbound;

/** @internal */
export const ContactCreate$outboundSchema: z.ZodType<
  ContactCreate$Outbound,
  z.ZodTypeDef,
  ContactCreate
> = z.union([
  ContactCreateWithFirstName$outboundSchema,
  ContactCreateWithCompanyName$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactCreate$ {
  /** @deprecated use `ContactCreate$inboundSchema` instead. */
  export const inboundSchema = ContactCreate$inboundSchema;
  /** @deprecated use `ContactCreate$outboundSchema` instead. */
  export const outboundSchema = ContactCreate$outboundSchema;
  /** @deprecated use `ContactCreate$Outbound` instead. */
  export type Outbound = ContactCreate$Outbound;
}

export function contactCreateToJSON(contactCreate: ContactCreate): string {
  return JSON.stringify(ContactCreate$outboundSchema.parse(contactCreate));
}

export function contactCreateFromJSON(
  jsonString: string,
): SafeParseResult<ContactCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactCreate' from JSON`,
  );
}
