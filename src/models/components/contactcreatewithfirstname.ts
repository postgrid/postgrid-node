/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContactCreateWithFirstName = {
  /**
   * The first line of the contact's address.
   */
  addressLine1: string;
  /**
   * Second line of the contact's address, if applicable.
   */
  addressLine2?: string | undefined;
  /**
   * The city of the contact's address.
   */
  city?: string | undefined;
  /**
   * Province or state of the contact's address.
   */
  provinceOrState?: string | undefined;
  /**
   * The postal or ZIP code of the contact's address.
   */
  postalOrZip?: string | undefined;
  /**
   * The ISO 3611-1 country code of the contact's address.
   */
  countryCode: string;
  /**
   * Company name of the contact.
   */
  companyName?: string | undefined;
  /**
   * Last name of the contact.
   */
  lastName?: string | undefined;
  /**
   * Email of the contact.
   */
  email?: string | undefined;
  /**
   * Phone number of the contact.
   */
  phoneNumber?: string | undefined;
  /**
   * Job title of the contact.
   */
  jobTitle?: string | undefined;
  /**
   * If `true`, PostGrid will skip running this contact's address through our address verification system.
   */
  skipVerification?: boolean | undefined;
  /**
   * If `true`, PostGrid will force this contact to have an `addressStatus` of `verified` even if our address verification system says otherwise.
   */
  forceVerifiedStatus?: boolean | undefined;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  firstName: string;
};

/** @internal */
export const ContactCreateWithFirstName$inboundSchema: z.ZodType<
  ContactCreateWithFirstName,
  z.ZodTypeDef,
  unknown
> = z.object({
  addressLine1: z.string(),
  addressLine2: z.string().optional(),
  city: z.string().optional(),
  provinceOrState: z.string().optional(),
  postalOrZip: z.string().optional(),
  countryCode: z.string(),
  companyName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phoneNumber: z.string().optional(),
  jobTitle: z.string().optional(),
  skipVerification: z.boolean().default(false),
  forceVerifiedStatus: z.boolean().default(false),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  firstName: z.string(),
});

/** @internal */
export type ContactCreateWithFirstName$Outbound = {
  addressLine1: string;
  addressLine2?: string | undefined;
  city?: string | undefined;
  provinceOrState?: string | undefined;
  postalOrZip?: string | undefined;
  countryCode: string;
  companyName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phoneNumber?: string | undefined;
  jobTitle?: string | undefined;
  skipVerification: boolean;
  forceVerifiedStatus: boolean;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  firstName: string;
};

/** @internal */
export const ContactCreateWithFirstName$outboundSchema: z.ZodType<
  ContactCreateWithFirstName$Outbound,
  z.ZodTypeDef,
  ContactCreateWithFirstName
> = z.object({
  addressLine1: z.string(),
  addressLine2: z.string().optional(),
  city: z.string().optional(),
  provinceOrState: z.string().optional(),
  postalOrZip: z.string().optional(),
  countryCode: z.string(),
  companyName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phoneNumber: z.string().optional(),
  jobTitle: z.string().optional(),
  skipVerification: z.boolean().default(false),
  forceVerifiedStatus: z.boolean().default(false),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  firstName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactCreateWithFirstName$ {
  /** @deprecated use `ContactCreateWithFirstName$inboundSchema` instead. */
  export const inboundSchema = ContactCreateWithFirstName$inboundSchema;
  /** @deprecated use `ContactCreateWithFirstName$outboundSchema` instead. */
  export const outboundSchema = ContactCreateWithFirstName$outboundSchema;
  /** @deprecated use `ContactCreateWithFirstName$Outbound` instead. */
  export type Outbound = ContactCreateWithFirstName$Outbound;
}

export function contactCreateWithFirstNameToJSON(
  contactCreateWithFirstName: ContactCreateWithFirstName,
): string {
  return JSON.stringify(
    ContactCreateWithFirstName$outboundSchema.parse(contactCreateWithFirstName),
  );
}

export function contactCreateWithFirstNameFromJSON(
  jsonString: string,
): SafeParseResult<ContactCreateWithFirstName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactCreateWithFirstName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactCreateWithFirstName' from JSON`,
  );
}
