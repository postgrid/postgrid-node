/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BankAccount,
  BankAccount$inboundSchema,
  BankAccount$Outbound,
  BankAccount$outboundSchema,
} from "./bankaccount.js";

export const BankAccountListObject = {
  List: "list",
} as const;
export type BankAccountListObject = ClosedEnum<typeof BankAccountListObject>;

export type BankAccountList = {
  object: BankAccountListObject;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<BankAccount>;
};

/** @internal */
export const BankAccountListObject$inboundSchema: z.ZodNativeEnum<
  typeof BankAccountListObject
> = z.nativeEnum(BankAccountListObject);

/** @internal */
export const BankAccountListObject$outboundSchema: z.ZodNativeEnum<
  typeof BankAccountListObject
> = BankAccountListObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountListObject$ {
  /** @deprecated use `BankAccountListObject$inboundSchema` instead. */
  export const inboundSchema = BankAccountListObject$inboundSchema;
  /** @deprecated use `BankAccountListObject$outboundSchema` instead. */
  export const outboundSchema = BankAccountListObject$outboundSchema;
}

/** @internal */
export const BankAccountList$inboundSchema: z.ZodType<
  BankAccountList,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: BankAccountListObject$inboundSchema,
  totalCount: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
  data: z.array(BankAccount$inboundSchema),
});

/** @internal */
export type BankAccountList$Outbound = {
  object: string;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<BankAccount$Outbound>;
};

/** @internal */
export const BankAccountList$outboundSchema: z.ZodType<
  BankAccountList$Outbound,
  z.ZodTypeDef,
  BankAccountList
> = z.object({
  object: BankAccountListObject$outboundSchema,
  totalCount: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
  data: z.array(BankAccount$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountList$ {
  /** @deprecated use `BankAccountList$inboundSchema` instead. */
  export const inboundSchema = BankAccountList$inboundSchema;
  /** @deprecated use `BankAccountList$outboundSchema` instead. */
  export const outboundSchema = BankAccountList$outboundSchema;
  /** @deprecated use `BankAccountList$Outbound` instead. */
  export type Outbound = BankAccountList$Outbound;
}

export function bankAccountListToJSON(
  bankAccountList: BankAccountList,
): string {
  return JSON.stringify(BankAccountList$outboundSchema.parse(bankAccountList));
}

export function bankAccountListFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccountList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountList' from JSON`,
  );
}
