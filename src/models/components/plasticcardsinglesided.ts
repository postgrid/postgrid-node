/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Model representing a single-sided plastic card.
 */
export type PlasticCardSingleSided = {
  /**
   * The HTML content for the single-sided plastic card. Can specify one of this, `template`, or `pdf`.
   */
  html?: string | undefined;
  /**
   * The template ID for the single-sided plastic card.
   */
  template?: string | undefined;
  /**
   * A URL pointing to a PDF file for the single-sided plastic card or the PDF file itself.
   */
  pdf?: string | undefined;
};

/** @internal */
export const PlasticCardSingleSided$inboundSchema: z.ZodType<
  PlasticCardSingleSided,
  z.ZodTypeDef,
  unknown
> = z.object({
  html: z.string().optional(),
  template: z.string().optional(),
  pdf: z.string().optional(),
});

/** @internal */
export type PlasticCardSingleSided$Outbound = {
  html?: string | undefined;
  template?: string | undefined;
  pdf?: string | undefined;
};

/** @internal */
export const PlasticCardSingleSided$outboundSchema: z.ZodType<
  PlasticCardSingleSided$Outbound,
  z.ZodTypeDef,
  PlasticCardSingleSided
> = z.object({
  html: z.string().optional(),
  template: z.string().optional(),
  pdf: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlasticCardSingleSided$ {
  /** @deprecated use `PlasticCardSingleSided$inboundSchema` instead. */
  export const inboundSchema = PlasticCardSingleSided$inboundSchema;
  /** @deprecated use `PlasticCardSingleSided$outboundSchema` instead. */
  export const outboundSchema = PlasticCardSingleSided$outboundSchema;
  /** @deprecated use `PlasticCardSingleSided$Outbound` instead. */
  export type Outbound = PlasticCardSingleSided$Outbound;
}

export function plasticCardSingleSidedToJSON(
  plasticCardSingleSided: PlasticCardSingleSided,
): string {
  return JSON.stringify(
    PlasticCardSingleSided$outboundSchema.parse(plasticCardSingleSided),
  );
}

export function plasticCardSingleSidedFromJSON(
  jsonString: string,
): SafeParseResult<PlasticCardSingleSided, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlasticCardSingleSided$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlasticCardSingleSided' from JSON`,
  );
}
