/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TemplateUpdate = {
  /**
   * The HTML content of this template.
   */
  html?: string | undefined;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const TemplateUpdate$inboundSchema: z.ZodType<
  TemplateUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  html: z.string().optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
});

/** @internal */
export type TemplateUpdate$Outbound = {
  html?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const TemplateUpdate$outboundSchema: z.ZodType<
  TemplateUpdate$Outbound,
  z.ZodTypeDef,
  TemplateUpdate
> = z.object({
  html: z.string().optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdate$ {
  /** @deprecated use `TemplateUpdate$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdate$inboundSchema;
  /** @deprecated use `TemplateUpdate$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdate$outboundSchema;
  /** @deprecated use `TemplateUpdate$Outbound` instead. */
  export type Outbound = TemplateUpdate$Outbound;
}

export function templateUpdateToJSON(templateUpdate: TemplateUpdate): string {
  return JSON.stringify(TemplateUpdate$outboundSchema.parse(templateUpdate));
}

export function templateUpdateFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdate' from JSON`,
  );
}
