/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PlasticCardDoubleSided,
  PlasticCardDoubleSided$inboundSchema,
  PlasticCardDoubleSided$Outbound,
  PlasticCardDoubleSided$outboundSchema,
} from "./plasticcarddoublesided.js";
import {
  PlasticCardSingleSided,
  PlasticCardSingleSided$inboundSchema,
  PlasticCardSingleSided$Outbound,
  PlasticCardSingleSided$outboundSchema,
} from "./plasticcardsinglesided.js";
import {
  PlasticCardSize,
  PlasticCardSize$inboundSchema,
  PlasticCardSize$outboundSchema,
} from "./plasticcardsize.js";

/**
 * Model representing a plastic card.
 */
export type PlasticCard = {
  /**
   * The size of the plastic card.
   */
  size: PlasticCardSize;
  /**
   * The single-sided plastic card details.
   */
  singleSided?: PlasticCardSingleSided | undefined;
  /**
   * The double-sided plastic card details.
   */
  doubleSided?: PlasticCardDoubleSided | undefined;
};

/** @internal */
export const PlasticCard$inboundSchema: z.ZodType<
  PlasticCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: PlasticCardSize$inboundSchema,
  singleSided: PlasticCardSingleSided$inboundSchema.optional(),
  doubleSided: PlasticCardDoubleSided$inboundSchema.optional(),
});

/** @internal */
export type PlasticCard$Outbound = {
  size: string;
  singleSided?: PlasticCardSingleSided$Outbound | undefined;
  doubleSided?: PlasticCardDoubleSided$Outbound | undefined;
};

/** @internal */
export const PlasticCard$outboundSchema: z.ZodType<
  PlasticCard$Outbound,
  z.ZodTypeDef,
  PlasticCard
> = z.object({
  size: PlasticCardSize$outboundSchema,
  singleSided: PlasticCardSingleSided$outboundSchema.optional(),
  doubleSided: PlasticCardDoubleSided$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlasticCard$ {
  /** @deprecated use `PlasticCard$inboundSchema` instead. */
  export const inboundSchema = PlasticCard$inboundSchema;
  /** @deprecated use `PlasticCard$outboundSchema` instead. */
  export const outboundSchema = PlasticCard$outboundSchema;
  /** @deprecated use `PlasticCard$Outbound` instead. */
  export type Outbound = PlasticCard$Outbound;
}

export function plasticCardToJSON(plasticCard: PlasticCard): string {
  return JSON.stringify(PlasticCard$outboundSchema.parse(plasticCard));
}

export function plasticCardFromJSON(
  jsonString: string,
): SafeParseResult<PlasticCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlasticCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlasticCard' from JSON`,
  );
}
