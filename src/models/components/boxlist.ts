/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Box,
  Box$inboundSchema,
  Box$Outbound,
  Box$outboundSchema,
} from "./box.js";

export const BoxListObject = {
  List: "list",
} as const;
export type BoxListObject = ClosedEnum<typeof BoxListObject>;

/**
 * A list of Boxes.
 */
export type BoxList = {
  object: BoxListObject;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<Box>;
};

/** @internal */
export const BoxListObject$inboundSchema: z.ZodNativeEnum<
  typeof BoxListObject
> = z.nativeEnum(BoxListObject);

/** @internal */
export const BoxListObject$outboundSchema: z.ZodNativeEnum<
  typeof BoxListObject
> = BoxListObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BoxListObject$ {
  /** @deprecated use `BoxListObject$inboundSchema` instead. */
  export const inboundSchema = BoxListObject$inboundSchema;
  /** @deprecated use `BoxListObject$outboundSchema` instead. */
  export const outboundSchema = BoxListObject$outboundSchema;
}

/** @internal */
export const BoxList$inboundSchema: z.ZodType<BoxList, z.ZodTypeDef, unknown> =
  z.object({
    object: BoxListObject$inboundSchema,
    totalCount: z.number().int(),
    skip: z.number().int(),
    limit: z.number().int(),
    data: z.array(Box$inboundSchema),
  });

/** @internal */
export type BoxList$Outbound = {
  object: string;
  totalCount: number;
  skip: number;
  limit: number;
  data: Array<Box$Outbound>;
};

/** @internal */
export const BoxList$outboundSchema: z.ZodType<
  BoxList$Outbound,
  z.ZodTypeDef,
  BoxList
> = z.object({
  object: BoxListObject$outboundSchema,
  totalCount: z.number().int(),
  skip: z.number().int(),
  limit: z.number().int(),
  data: z.array(Box$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BoxList$ {
  /** @deprecated use `BoxList$inboundSchema` instead. */
  export const inboundSchema = BoxList$inboundSchema;
  /** @deprecated use `BoxList$outboundSchema` instead. */
  export const outboundSchema = BoxList$outboundSchema;
  /** @deprecated use `BoxList$Outbound` instead. */
  export type Outbound = BoxList$Outbound;
}

export function boxListToJSON(boxList: BoxList): string {
  return JSON.stringify(BoxList$outboundSchema.parse(boxList));
}

export function boxListFromJSON(
  jsonString: string,
): SafeParseResult<BoxList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BoxList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BoxList' from JSON`,
  );
}
