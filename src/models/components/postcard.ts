/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Cancellation,
  Cancellation$inboundSchema,
  Cancellation$Outbound,
  Cancellation$outboundSchema,
} from "./cancellation.js";
import {
  Contact,
  Contact$inboundSchema,
  Contact$Outbound,
  Contact$outboundSchema,
} from "./contact.js";
import {
  OrderIMBStatus,
  OrderIMBStatus$inboundSchema,
  OrderIMBStatus$outboundSchema,
} from "./orderimbstatus.js";
import {
  OrderMailingClass,
  OrderMailingClass$inboundSchema,
  OrderMailingClass$outboundSchema,
} from "./ordermailingclass.js";
import {
  OrderStatus,
  OrderStatus$inboundSchema,
  OrderStatus$outboundSchema,
} from "./orderstatus.js";
import {
  PostcardSize,
  PostcardSize$inboundSchema,
  PostcardSize$outboundSchema,
} from "./postcardsize.js";

/**
 * Always `postcard`.
 */
export const PostcardObject = {
  Postcard: "postcard",
} as const;
/**
 * Always `postcard`.
 */
export type PostcardObject = ClosedEnum<typeof PostcardObject>;

export type Postcard = {
  /**
   * See `OrderStatus` for more details on the status of this order.
   */
  status: OrderStatus;
  /**
   * These will be merged with the variables in the template or HTML you create this order with. The keys in this object should match the variable names in the template _exactly_ as they are case-sensitive. Note that these _do not_ apply to PDFs uploaded with the order.
   */
  mergeVariables?: { [k: string]: any } | undefined;
  /**
   * The tracking number of this order. Populated after an express/certified order has been processed for delivery.
   */
  trackingNumber?: string | undefined;
  /**
   * The Intelligent Mail Barcode (IMB) status of this order. Only populated for US-printed and US-destined orders. This is the most detailed way to track non-express/certified orders.
   */
  imbStatus?: OrderIMBStatus | undefined;
  /**
   * The most recent ZIP code of the USPS facility that the order has been processed through. Only populated when an `imbStatus` is present.
   */
  imbZIPCode?: string | undefined;
  /**
   * The last date that the IMB status was updated. See `imbStatus` for more details.
   */
  imbDate?: Date | undefined;
  /**
   * The cancellation details of this order. Populated if the order has been cancelled.
   */
  cancellation?: Cancellation | undefined;
  /**
   * PostGrid renders a PDF preview for all orders. This should be inspected to ensure that the order is correct before it is sent out because it shows what will be printed and mailed to the recipient. Once the PDF preview is generated, this field will be returned by all `GET` endpoints which produce this order.
   *
   * @remarks
   *
   * This URL is a signed link to the PDF preview. It will expire after a short period of time. If you need to access this URL after it has expired, you can regenerate it by calling the `GET` endpoint again.
   */
  url?: string | undefined;
  /**
   * A unique ID prefixed with postcard_
   */
  id: string;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * `true` if this is a live mode resource else `false`.
   */
  live: boolean;
  /**
   * The UTC time at which this resource was created.
   */
  createdAt: Date;
  /**
   * The UTC time at which this resource was last updated.
   */
  updatedAt: Date;
  /**
   * This order will transition from `ready` to `printing` on the day after this date. For example, if this is a date on Tuesday, the order will transition to `printing` on Wednesday at midnight eastern time.
   */
  sendDate: Date;
  /**
   * The mailing class of this order. This determines the speed and cost of delivery. See `OrderMailingClass` for more details.
   */
  mailingClass: OrderMailingClass;
  /**
   * The recipient of this order. This will be provided even if you delete the underlying contact.
   */
  to: Contact;
  /**
   * Always `postcard`.
   */
  object: PostcardObject;
  /**
   * The size of the postcard.
   */
  size: PostcardSize;
  /**
   * The contact information of the sender.
   */
  from?: Contact | undefined;
};

/** @internal */
export const PostcardObject$inboundSchema: z.ZodNativeEnum<
  typeof PostcardObject
> = z.nativeEnum(PostcardObject);

/** @internal */
export const PostcardObject$outboundSchema: z.ZodNativeEnum<
  typeof PostcardObject
> = PostcardObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostcardObject$ {
  /** @deprecated use `PostcardObject$inboundSchema` instead. */
  export const inboundSchema = PostcardObject$inboundSchema;
  /** @deprecated use `PostcardObject$outboundSchema` instead. */
  export const outboundSchema = PostcardObject$outboundSchema;
}

/** @internal */
export const Postcard$inboundSchema: z.ZodType<
  Postcard,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: OrderStatus$inboundSchema,
  mergeVariables: z.record(z.any()).optional(),
  trackingNumber: z.string().optional(),
  imbStatus: OrderIMBStatus$inboundSchema.optional(),
  imbZIPCode: z.string().optional(),
  imbDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  cancellation: Cancellation$inboundSchema.optional(),
  url: z.string().optional(),
  id: z.string(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  live: z.boolean(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  sendDate: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  mailingClass: OrderMailingClass$inboundSchema,
  to: Contact$inboundSchema,
  object: PostcardObject$inboundSchema,
  size: PostcardSize$inboundSchema,
  from: Contact$inboundSchema.optional(),
});

/** @internal */
export type Postcard$Outbound = {
  status: string;
  mergeVariables?: { [k: string]: any } | undefined;
  trackingNumber?: string | undefined;
  imbStatus?: string | undefined;
  imbZIPCode?: string | undefined;
  imbDate?: string | undefined;
  cancellation?: Cancellation$Outbound | undefined;
  url?: string | undefined;
  id: string;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  live: boolean;
  createdAt: string;
  updatedAt: string;
  sendDate: string;
  mailingClass: string;
  to: Contact$Outbound;
  object: string;
  size: string;
  from?: Contact$Outbound | undefined;
};

/** @internal */
export const Postcard$outboundSchema: z.ZodType<
  Postcard$Outbound,
  z.ZodTypeDef,
  Postcard
> = z.object({
  status: OrderStatus$outboundSchema,
  mergeVariables: z.record(z.any()).optional(),
  trackingNumber: z.string().optional(),
  imbStatus: OrderIMBStatus$outboundSchema.optional(),
  imbZIPCode: z.string().optional(),
  imbDate: z.date().transform(v => v.toISOString()).optional(),
  cancellation: Cancellation$outboundSchema.optional(),
  url: z.string().optional(),
  id: z.string(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  live: z.boolean(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  sendDate: z.date().transform(v => v.toISOString()),
  mailingClass: OrderMailingClass$outboundSchema,
  to: Contact$outboundSchema,
  object: PostcardObject$outboundSchema,
  size: PostcardSize$outboundSchema,
  from: Contact$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postcard$ {
  /** @deprecated use `Postcard$inboundSchema` instead. */
  export const inboundSchema = Postcard$inboundSchema;
  /** @deprecated use `Postcard$outboundSchema` instead. */
  export const outboundSchema = Postcard$outboundSchema;
  /** @deprecated use `Postcard$Outbound` instead. */
  export type Outbound = Postcard$Outbound;
}

export function postcardToJSON(postcard: Postcard): string {
  return JSON.stringify(Postcard$outboundSchema.parse(postcard));
}

export function postcardFromJSON(
  jsonString: string,
): SafeParseResult<Postcard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postcard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postcard' from JSON`,
  );
}
