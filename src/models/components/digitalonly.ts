/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DigitalOnly = {
  /**
   * Text to be displayed as a watermark on the digital cheque.
   */
  watermark: string;
};

/** @internal */
export const DigitalOnly$inboundSchema: z.ZodType<
  DigitalOnly,
  z.ZodTypeDef,
  unknown
> = z.object({
  watermark: z.string(),
});

/** @internal */
export type DigitalOnly$Outbound = {
  watermark: string;
};

/** @internal */
export const DigitalOnly$outboundSchema: z.ZodType<
  DigitalOnly$Outbound,
  z.ZodTypeDef,
  DigitalOnly
> = z.object({
  watermark: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigitalOnly$ {
  /** @deprecated use `DigitalOnly$inboundSchema` instead. */
  export const inboundSchema = DigitalOnly$inboundSchema;
  /** @deprecated use `DigitalOnly$outboundSchema` instead. */
  export const outboundSchema = DigitalOnly$outboundSchema;
  /** @deprecated use `DigitalOnly$Outbound` instead. */
  export type Outbound = DigitalOnly$Outbound;
}

export function digitalOnlyToJSON(digitalOnly: DigitalOnly): string {
  return JSON.stringify(DigitalOnly$outboundSchema.parse(digitalOnly));
}

export function digitalOnlyFromJSON(
  jsonString: string,
): SafeParseResult<DigitalOnly, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DigitalOnly$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DigitalOnly' from JSON`,
  );
}
