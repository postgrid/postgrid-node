/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The reason for the cancellation.
 */
export const Reason = {
  UserInitiated: "user_initiated",
  InvalidContent: "invalid_content",
  InvalidOrderMailingClass: "invalid_order_mailing_class",
} as const;
/**
 * The reason for the cancellation.
 */
export type Reason = ClosedEnum<typeof Reason>;

export type Cancellation = {
  /**
   * The reason for the cancellation.
   */
  reason: Reason;
  /**
   * The user ID who cancelled the order.
   */
  cancelledByUser?: string | undefined;
  /**
   * An optional note provided by the user who cancelled the order.
   */
  note?: string | undefined;
};

/** @internal */
export const Reason$inboundSchema: z.ZodNativeEnum<typeof Reason> = z
  .nativeEnum(Reason);

/** @internal */
export const Reason$outboundSchema: z.ZodNativeEnum<typeof Reason> =
  Reason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reason$ {
  /** @deprecated use `Reason$inboundSchema` instead. */
  export const inboundSchema = Reason$inboundSchema;
  /** @deprecated use `Reason$outboundSchema` instead. */
  export const outboundSchema = Reason$outboundSchema;
}

/** @internal */
export const Cancellation$inboundSchema: z.ZodType<
  Cancellation,
  z.ZodTypeDef,
  unknown
> = z.object({
  reason: Reason$inboundSchema,
  cancelledByUser: z.string().optional(),
  note: z.string().optional(),
});

/** @internal */
export type Cancellation$Outbound = {
  reason: string;
  cancelledByUser?: string | undefined;
  note?: string | undefined;
};

/** @internal */
export const Cancellation$outboundSchema: z.ZodType<
  Cancellation$Outbound,
  z.ZodTypeDef,
  Cancellation
> = z.object({
  reason: Reason$outboundSchema,
  cancelledByUser: z.string().optional(),
  note: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cancellation$ {
  /** @deprecated use `Cancellation$inboundSchema` instead. */
  export const inboundSchema = Cancellation$inboundSchema;
  /** @deprecated use `Cancellation$outboundSchema` instead. */
  export const outboundSchema = Cancellation$outboundSchema;
  /** @deprecated use `Cancellation$Outbound` instead. */
  export type Outbound = Cancellation$Outbound;
}

export function cancellationToJSON(cancellation: Cancellation): string {
  return JSON.stringify(Cancellation$outboundSchema.parse(cancellation));
}

export function cancellationFromJSON(
  jsonString: string,
): SafeParseResult<Cancellation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cancellation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cancellation' from JSON`,
  );
}
