/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttachedPDF,
  AttachedPDF$inboundSchema,
  AttachedPDF$Outbound,
  AttachedPDF$outboundSchema,
} from "./attachedpdf.js";
import {
  ContactCreate,
  ContactCreate$inboundSchema,
  ContactCreate$Outbound,
  ContactCreate$outboundSchema,
} from "./contactcreate.js";
import {
  OrderMailingClass,
  OrderMailingClass$inboundSchema,
  OrderMailingClass$outboundSchema,
} from "./ordermailingclass.js";
import {
  PlasticCard,
  PlasticCard$inboundSchema,
  PlasticCard$Outbound,
  PlasticCard$outboundSchema,
} from "./plasticcard.js";

/**
 * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
 */
export type LetterCreateWithPDFTo = ContactCreate | string;

/**
 * The contact information of the sender. You can pass contact information inline here just like you can for the `to`.
 */
export type LetterCreateWithPDFFrom = ContactCreate | string;

/**
 * The size of the letter.
 */
export const LetterCreateWithPDFSize = {
  UsLetter: "us_letter",
  A4: "a4",
} as const;
/**
 * The size of the letter.
 */
export type LetterCreateWithPDFSize = ClosedEnum<
  typeof LetterCreateWithPDFSize
>;

/**
 * The placement of the address on the letter.
 */
export const LetterCreateWithPDFAddressPlacement = {
  TopFirstPage: "top_first_page",
  InsertBlankPage: "insert_blank_page",
} as const;
/**
 * The placement of the address on the letter.
 */
export type LetterCreateWithPDFAddressPlacement = ClosedEnum<
  typeof LetterCreateWithPDFAddressPlacement
>;

export type LetterCreateWithPDF = {
  /**
   * These will be merged with the variables in the template or HTML you create this order with. The keys in this object should match the variable names in the template _exactly_ as they are case-sensitive. Note that these _do not_ apply to PDFs uploaded with the order.
   */
  mergeVariables?: { [k: string]: any } | undefined;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * This order will transition from `ready` to `printing` on the day after this date. You can use this parameter to schedule orders for a future date.
   */
  sendDate?: Date | undefined;
  /**
   * The mailing class of this order. If not provided, automatically set to `first_class`.
   */
  mailingClass?: OrderMailingClass | undefined;
  /**
   * The recipient of this order. You can either supply the contact information inline here or provide a contact ID. PostGrid will automatically deduplicate contacts regardless of whether you provide the information inline here or call the contact creation endpoint.
   */
  to: ContactCreate | string;
  /**
   * If specified, indicates which letter page is perforated. Currently, only the first page can be perforated.
   */
  perforatedPage?: number | undefined;
  /**
   * The return envelope (ID) sent out with the letter, if any.
   */
  returnEnvelope?: string | undefined;
  /**
   * You can attach a PDF to the content you supply for this letter. This is useful if you have some stati
   */
  attachedPDF?: AttachedPDF | undefined;
  /**
   * The plastic card sent out with the letter, if any.
   */
  plasticCard?: PlasticCard | undefined;
  /**
   * Indicates if the letter is double-sided.
   */
  doubleSided?: boolean | undefined;
  /**
   * Indicates if the letter is in color.
   */
  color?: boolean | undefined;
  /**
   * The contact information of the sender. You can pass contact information inline here just like you can for the `to`.
   */
  from: ContactCreate | string;
  /**
   * The size of the letter.
   */
  size?: LetterCreateWithPDFSize | undefined;
  /**
   * The placement of the address on the letter.
   */
  addressPlacement?: LetterCreateWithPDFAddressPlacement | undefined;
  /**
   * The envelope (ID) for the letter. You can either specify a custom envelope ID or use the default `standard` envelope.
   */
  envelope?: string | undefined;
  /**
   * A URL pointing to a PDF file for the letter or the PDF file itself.
   */
  pdf: string;
};

/** @internal */
export const LetterCreateWithPDFTo$inboundSchema: z.ZodType<
  LetterCreateWithPDFTo,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type LetterCreateWithPDFTo$Outbound = ContactCreate$Outbound | string;

/** @internal */
export const LetterCreateWithPDFTo$outboundSchema: z.ZodType<
  LetterCreateWithPDFTo$Outbound,
  z.ZodTypeDef,
  LetterCreateWithPDFTo
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterCreateWithPDFTo$ {
  /** @deprecated use `LetterCreateWithPDFTo$inboundSchema` instead. */
  export const inboundSchema = LetterCreateWithPDFTo$inboundSchema;
  /** @deprecated use `LetterCreateWithPDFTo$outboundSchema` instead. */
  export const outboundSchema = LetterCreateWithPDFTo$outboundSchema;
  /** @deprecated use `LetterCreateWithPDFTo$Outbound` instead. */
  export type Outbound = LetterCreateWithPDFTo$Outbound;
}

export function letterCreateWithPDFToToJSON(
  letterCreateWithPDFTo: LetterCreateWithPDFTo,
): string {
  return JSON.stringify(
    LetterCreateWithPDFTo$outboundSchema.parse(letterCreateWithPDFTo),
  );
}

export function letterCreateWithPDFToFromJSON(
  jsonString: string,
): SafeParseResult<LetterCreateWithPDFTo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LetterCreateWithPDFTo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LetterCreateWithPDFTo' from JSON`,
  );
}

/** @internal */
export const LetterCreateWithPDFFrom$inboundSchema: z.ZodType<
  LetterCreateWithPDFFrom,
  z.ZodTypeDef,
  unknown
> = z.union([ContactCreate$inboundSchema, z.string()]);

/** @internal */
export type LetterCreateWithPDFFrom$Outbound = ContactCreate$Outbound | string;

/** @internal */
export const LetterCreateWithPDFFrom$outboundSchema: z.ZodType<
  LetterCreateWithPDFFrom$Outbound,
  z.ZodTypeDef,
  LetterCreateWithPDFFrom
> = z.union([ContactCreate$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterCreateWithPDFFrom$ {
  /** @deprecated use `LetterCreateWithPDFFrom$inboundSchema` instead. */
  export const inboundSchema = LetterCreateWithPDFFrom$inboundSchema;
  /** @deprecated use `LetterCreateWithPDFFrom$outboundSchema` instead. */
  export const outboundSchema = LetterCreateWithPDFFrom$outboundSchema;
  /** @deprecated use `LetterCreateWithPDFFrom$Outbound` instead. */
  export type Outbound = LetterCreateWithPDFFrom$Outbound;
}

export function letterCreateWithPDFFromToJSON(
  letterCreateWithPDFFrom: LetterCreateWithPDFFrom,
): string {
  return JSON.stringify(
    LetterCreateWithPDFFrom$outboundSchema.parse(letterCreateWithPDFFrom),
  );
}

export function letterCreateWithPDFFromFromJSON(
  jsonString: string,
): SafeParseResult<LetterCreateWithPDFFrom, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LetterCreateWithPDFFrom$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LetterCreateWithPDFFrom' from JSON`,
  );
}

/** @internal */
export const LetterCreateWithPDFSize$inboundSchema: z.ZodNativeEnum<
  typeof LetterCreateWithPDFSize
> = z.nativeEnum(LetterCreateWithPDFSize);

/** @internal */
export const LetterCreateWithPDFSize$outboundSchema: z.ZodNativeEnum<
  typeof LetterCreateWithPDFSize
> = LetterCreateWithPDFSize$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterCreateWithPDFSize$ {
  /** @deprecated use `LetterCreateWithPDFSize$inboundSchema` instead. */
  export const inboundSchema = LetterCreateWithPDFSize$inboundSchema;
  /** @deprecated use `LetterCreateWithPDFSize$outboundSchema` instead. */
  export const outboundSchema = LetterCreateWithPDFSize$outboundSchema;
}

/** @internal */
export const LetterCreateWithPDFAddressPlacement$inboundSchema: z.ZodNativeEnum<
  typeof LetterCreateWithPDFAddressPlacement
> = z.nativeEnum(LetterCreateWithPDFAddressPlacement);

/** @internal */
export const LetterCreateWithPDFAddressPlacement$outboundSchema:
  z.ZodNativeEnum<typeof LetterCreateWithPDFAddressPlacement> =
    LetterCreateWithPDFAddressPlacement$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterCreateWithPDFAddressPlacement$ {
  /** @deprecated use `LetterCreateWithPDFAddressPlacement$inboundSchema` instead. */
  export const inboundSchema =
    LetterCreateWithPDFAddressPlacement$inboundSchema;
  /** @deprecated use `LetterCreateWithPDFAddressPlacement$outboundSchema` instead. */
  export const outboundSchema =
    LetterCreateWithPDFAddressPlacement$outboundSchema;
}

/** @internal */
export const LetterCreateWithPDF$inboundSchema: z.ZodType<
  LetterCreateWithPDF,
  z.ZodTypeDef,
  unknown
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  mailingClass: OrderMailingClass$inboundSchema.optional(),
  to: z.union([ContactCreate$inboundSchema, z.string()]),
  perforatedPage: z.number().optional(),
  returnEnvelope: z.string().optional(),
  attachedPDF: AttachedPDF$inboundSchema.optional(),
  plasticCard: PlasticCard$inboundSchema.optional(),
  doubleSided: z.boolean().default(false),
  color: z.boolean().default(false),
  from: z.union([ContactCreate$inboundSchema, z.string()]),
  size: LetterCreateWithPDFSize$inboundSchema.default("us_letter"),
  addressPlacement: LetterCreateWithPDFAddressPlacement$inboundSchema.default(
    "top_first_page",
  ),
  envelope: z.string().default("standard"),
  pdf: z.string(),
});

/** @internal */
export type LetterCreateWithPDF$Outbound = {
  mergeVariables?: { [k: string]: any } | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  sendDate?: string | undefined;
  mailingClass?: string | undefined;
  to: ContactCreate$Outbound | string;
  perforatedPage?: number | undefined;
  returnEnvelope?: string | undefined;
  attachedPDF?: AttachedPDF$Outbound | undefined;
  plasticCard?: PlasticCard$Outbound | undefined;
  doubleSided: boolean;
  color: boolean;
  from: ContactCreate$Outbound | string;
  size: string;
  addressPlacement: string;
  envelope: string;
  pdf: string;
};

/** @internal */
export const LetterCreateWithPDF$outboundSchema: z.ZodType<
  LetterCreateWithPDF$Outbound,
  z.ZodTypeDef,
  LetterCreateWithPDF
> = z.object({
  mergeVariables: z.record(z.any()).optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  sendDate: z.date().transform(v => v.toISOString()).optional(),
  mailingClass: OrderMailingClass$outboundSchema.optional(),
  to: z.union([ContactCreate$outboundSchema, z.string()]),
  perforatedPage: z.number().optional(),
  returnEnvelope: z.string().optional(),
  attachedPDF: AttachedPDF$outboundSchema.optional(),
  plasticCard: PlasticCard$outboundSchema.optional(),
  doubleSided: z.boolean().default(false),
  color: z.boolean().default(false),
  from: z.union([ContactCreate$outboundSchema, z.string()]),
  size: LetterCreateWithPDFSize$outboundSchema.default("us_letter"),
  addressPlacement: LetterCreateWithPDFAddressPlacement$outboundSchema.default(
    "top_first_page",
  ),
  envelope: z.string().default("standard"),
  pdf: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LetterCreateWithPDF$ {
  /** @deprecated use `LetterCreateWithPDF$inboundSchema` instead. */
  export const inboundSchema = LetterCreateWithPDF$inboundSchema;
  /** @deprecated use `LetterCreateWithPDF$outboundSchema` instead. */
  export const outboundSchema = LetterCreateWithPDF$outboundSchema;
  /** @deprecated use `LetterCreateWithPDF$Outbound` instead. */
  export type Outbound = LetterCreateWithPDF$Outbound;
}

export function letterCreateWithPDFToJSON(
  letterCreateWithPDF: LetterCreateWithPDF,
): string {
  return JSON.stringify(
    LetterCreateWithPDF$outboundSchema.parse(letterCreateWithPDF),
  );
}

export function letterCreateWithPDFFromJSON(
  jsonString: string,
): SafeParseResult<LetterCreateWithPDF, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LetterCreateWithPDF$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LetterCreateWithPDF' from JSON`,
  );
}
