/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BankAccountCountryCode,
  BankAccountCountryCode$inboundSchema,
  BankAccountCountryCode$outboundSchema,
} from "./bankaccountcountrycode.js";

export type BankAccountCreateSignatureImageFile = {
  /**
   * The name of the bank.
   */
  bankName: string;
  /**
   * The primary address line of the bank.
   */
  bankPrimaryLine?: string | undefined;
  /**
   * The secondary address line of the bank.
   */
  bankSecondaryLine?: string | undefined;
  /**
   * The country code of the bank.
   */
  bankCountryCode: BankAccountCountryCode;
  /**
   * The account number of the bank account.
   */
  accountNumber: string;
  /**
   * The routing number of the bank account (for US).
   */
  routingNumber?: string | undefined;
  /**
   * The transit number of the bank account (for CA).
   */
  transitNumber?: string | undefined;
  /**
   * The route number of the bank account (for CA).
   */
  routeNumber?: string | undefined;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * A PNG or JPEG file which PostGrid will apply to checks created with this bank account.
   */
  signatureImage: string;
};

/** @internal */
export const BankAccountCreateSignatureImageFile$inboundSchema: z.ZodType<
  BankAccountCreateSignatureImageFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  bankName: z.string(),
  bankPrimaryLine: z.string().optional(),
  bankSecondaryLine: z.string().optional(),
  bankCountryCode: BankAccountCountryCode$inboundSchema,
  accountNumber: z.string(),
  routingNumber: z.string().optional(),
  transitNumber: z.string().optional(),
  routeNumber: z.string().optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  signatureImage: z.string(),
});

/** @internal */
export type BankAccountCreateSignatureImageFile$Outbound = {
  bankName: string;
  bankPrimaryLine?: string | undefined;
  bankSecondaryLine?: string | undefined;
  bankCountryCode: string;
  accountNumber: string;
  routingNumber?: string | undefined;
  transitNumber?: string | undefined;
  routeNumber?: string | undefined;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  signatureImage: string;
};

/** @internal */
export const BankAccountCreateSignatureImageFile$outboundSchema: z.ZodType<
  BankAccountCreateSignatureImageFile$Outbound,
  z.ZodTypeDef,
  BankAccountCreateSignatureImageFile
> = z.object({
  bankName: z.string(),
  bankPrimaryLine: z.string().optional(),
  bankSecondaryLine: z.string().optional(),
  bankCountryCode: BankAccountCountryCode$outboundSchema,
  accountNumber: z.string(),
  routingNumber: z.string().optional(),
  transitNumber: z.string().optional(),
  routeNumber: z.string().optional(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  signatureImage: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountCreateSignatureImageFile$ {
  /** @deprecated use `BankAccountCreateSignatureImageFile$inboundSchema` instead. */
  export const inboundSchema =
    BankAccountCreateSignatureImageFile$inboundSchema;
  /** @deprecated use `BankAccountCreateSignatureImageFile$outboundSchema` instead. */
  export const outboundSchema =
    BankAccountCreateSignatureImageFile$outboundSchema;
  /** @deprecated use `BankAccountCreateSignatureImageFile$Outbound` instead. */
  export type Outbound = BankAccountCreateSignatureImageFile$Outbound;
}

export function bankAccountCreateSignatureImageFileToJSON(
  bankAccountCreateSignatureImageFile: BankAccountCreateSignatureImageFile,
): string {
  return JSON.stringify(
    BankAccountCreateSignatureImageFile$outboundSchema.parse(
      bankAccountCreateSignatureImageFile,
    ),
  );
}

export function bankAccountCreateSignatureImageFileFromJSON(
  jsonString: string,
): SafeParseResult<BankAccountCreateSignatureImageFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BankAccountCreateSignatureImageFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccountCreateSignatureImageFile' from JSON`,
  );
}
