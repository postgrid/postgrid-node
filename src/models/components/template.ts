/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Always `template`.
 */
export const TemplateObject = {
  Template: "template",
} as const;
/**
 * Always `template`.
 */
export type TemplateObject = ClosedEnum<typeof TemplateObject>;

export type Template = {
  /**
   * A unique ID prefixed with template_
   */
  id: string;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * `true` if this is a live mode resource else `false`.
   */
  live: boolean;
  /**
   * The UTC time at which this resource was created.
   */
  createdAt: Date;
  /**
   * The UTC time at which this resource was last updated.
   */
  updatedAt: Date;
  /**
   * Always `template`.
   */
  object: TemplateObject;
  /**
   * The HTML content of this template.
   */
  html?: string | undefined;
};

/** @internal */
export const TemplateObject$inboundSchema: z.ZodNativeEnum<
  typeof TemplateObject
> = z.nativeEnum(TemplateObject);

/** @internal */
export const TemplateObject$outboundSchema: z.ZodNativeEnum<
  typeof TemplateObject
> = TemplateObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateObject$ {
  /** @deprecated use `TemplateObject$inboundSchema` instead. */
  export const inboundSchema = TemplateObject$inboundSchema;
  /** @deprecated use `TemplateObject$outboundSchema` instead. */
  export const outboundSchema = TemplateObject$outboundSchema;
}

/** @internal */
export const Template$inboundSchema: z.ZodType<
  Template,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  live: z.boolean(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  object: TemplateObject$inboundSchema,
  html: z.string().optional(),
});

/** @internal */
export type Template$Outbound = {
  id: string;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  live: boolean;
  createdAt: string;
  updatedAt: string;
  object: string;
  html?: string | undefined;
};

/** @internal */
export const Template$outboundSchema: z.ZodType<
  Template$Outbound,
  z.ZodTypeDef,
  Template
> = z.object({
  id: z.string(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  live: z.boolean(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  object: TemplateObject$outboundSchema,
  html: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Template$ {
  /** @deprecated use `Template$inboundSchema` instead. */
  export const inboundSchema = Template$inboundSchema;
  /** @deprecated use `Template$outboundSchema` instead. */
  export const outboundSchema = Template$outboundSchema;
  /** @deprecated use `Template$Outbound` instead. */
  export type Outbound = Template$Outbound;
}

export function templateToJSON(template: Template): string {
  return JSON.stringify(Template$outboundSchema.parse(template));
}

export function templateFromJSON(
  jsonString: string,
): SafeParseResult<Template, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Template$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Template' from JSON`,
  );
}
