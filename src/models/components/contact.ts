/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Always `contact`.
 */
export const ContactObject = {
  Contact: "contact",
} as const;
/**
 * Always `contact`.
 */
export type ContactObject = ClosedEnum<typeof ContactObject>;

/**
 * One of `verified`, `corrected`, or `failed`.
 */
export const AddressStatus = {
  Verified: "verified",
  Corrected: "corrected",
  Failed: "failed",
} as const;
/**
 * One of `verified`, `corrected`, or `failed`.
 */
export type AddressStatus = ClosedEnum<typeof AddressStatus>;

export type Contact = {
  /**
   * A unique ID prefixed with contact_
   */
  id: string;
  /**
   * An optional string describing this resource. Will be visible in the API and the dashboard.
   */
  description?: string | undefined;
  /**
   * See the section on Metadata.
   */
  metadata?: { [k: string]: any } | undefined;
  /**
   * `true` if this is a live mode resource else `false`.
   */
  live: boolean;
  /**
   * The UTC time at which this resource was created.
   */
  createdAt: Date;
  /**
   * The UTC time at which this resource was last updated.
   */
  updatedAt: Date;
  /**
   * Always `contact`.
   */
  object: ContactObject;
  /**
   * The first line of the contact's address.
   */
  addressLine1: string;
  /**
   * Second line of the contact's address, if applicable.
   */
  addressLine2?: string | undefined;
  /**
   * The city of the contact's address.
   */
  city?: string | undefined;
  /**
   * Province or state of the contact's address.
   */
  provinceOrState?: string | undefined;
  /**
   * The postal or ZIP code of the contact's address.
   */
  postalOrZip?: string | undefined;
  /**
   * The ISO 3611-1 country code of the contact's address.
   */
  countryCode: string;
  /**
   * One of `verified`, `corrected`, or `failed`.
   */
  addressStatus: AddressStatus;
  /**
   * A series of human-readable errors/warnings that were raised when running the provided address through our address verification.
   */
  addressErrors?: string | undefined;
  /**
   * Company name of the contact.
   */
  companyName?: string | undefined;
  /**
   * First name of the contact.
   */
  firstName?: string | undefined;
  /**
   * Last name of the contact.
   */
  lastName?: string | undefined;
  /**
   * Email of the contact.
   */
  email?: string | undefined;
  /**
   * Phone number of the contact.
   */
  phoneNumber?: string | undefined;
  /**
   * Job title of the contact.
   */
  jobTitle?: string | undefined;
  /**
   * If `true`, PostGrid will skip running this contact's address through our address verification system.
   */
  skipVerification?: boolean | undefined;
  /**
   * If `true`, PostGrid will force this contact to have an `addressStatus` of `verified` even if our address verification system says otherwise.
   */
  forceVerifiedStatus?: boolean | undefined;
};

/** @internal */
export const ContactObject$inboundSchema: z.ZodNativeEnum<
  typeof ContactObject
> = z.nativeEnum(ContactObject);

/** @internal */
export const ContactObject$outboundSchema: z.ZodNativeEnum<
  typeof ContactObject
> = ContactObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactObject$ {
  /** @deprecated use `ContactObject$inboundSchema` instead. */
  export const inboundSchema = ContactObject$inboundSchema;
  /** @deprecated use `ContactObject$outboundSchema` instead. */
  export const outboundSchema = ContactObject$outboundSchema;
}

/** @internal */
export const AddressStatus$inboundSchema: z.ZodNativeEnum<
  typeof AddressStatus
> = z.nativeEnum(AddressStatus);

/** @internal */
export const AddressStatus$outboundSchema: z.ZodNativeEnum<
  typeof AddressStatus
> = AddressStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressStatus$ {
  /** @deprecated use `AddressStatus$inboundSchema` instead. */
  export const inboundSchema = AddressStatus$inboundSchema;
  /** @deprecated use `AddressStatus$outboundSchema` instead. */
  export const outboundSchema = AddressStatus$outboundSchema;
}

/** @internal */
export const Contact$inboundSchema: z.ZodType<Contact, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    description: z.string().optional(),
    metadata: z.record(z.any()).optional(),
    live: z.boolean(),
    createdAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    updatedAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    object: ContactObject$inboundSchema,
    addressLine1: z.string(),
    addressLine2: z.string().optional(),
    city: z.string().optional(),
    provinceOrState: z.string().optional(),
    postalOrZip: z.string().optional(),
    countryCode: z.string(),
    addressStatus: AddressStatus$inboundSchema,
    addressErrors: z.string().optional(),
    companyName: z.string().optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    email: z.string().optional(),
    phoneNumber: z.string().optional(),
    jobTitle: z.string().optional(),
    skipVerification: z.boolean().default(false),
    forceVerifiedStatus: z.boolean().default(false),
  });

/** @internal */
export type Contact$Outbound = {
  id: string;
  description?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  live: boolean;
  createdAt: string;
  updatedAt: string;
  object: string;
  addressLine1: string;
  addressLine2?: string | undefined;
  city?: string | undefined;
  provinceOrState?: string | undefined;
  postalOrZip?: string | undefined;
  countryCode: string;
  addressStatus: string;
  addressErrors?: string | undefined;
  companyName?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phoneNumber?: string | undefined;
  jobTitle?: string | undefined;
  skipVerification: boolean;
  forceVerifiedStatus: boolean;
};

/** @internal */
export const Contact$outboundSchema: z.ZodType<
  Contact$Outbound,
  z.ZodTypeDef,
  Contact
> = z.object({
  id: z.string(),
  description: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  live: z.boolean(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  object: ContactObject$outboundSchema,
  addressLine1: z.string(),
  addressLine2: z.string().optional(),
  city: z.string().optional(),
  provinceOrState: z.string().optional(),
  postalOrZip: z.string().optional(),
  countryCode: z.string(),
  addressStatus: AddressStatus$outboundSchema,
  addressErrors: z.string().optional(),
  companyName: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phoneNumber: z.string().optional(),
  jobTitle: z.string().optional(),
  skipVerification: z.boolean().default(false),
  forceVerifiedStatus: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contact$ {
  /** @deprecated use `Contact$inboundSchema` instead. */
  export const inboundSchema = Contact$inboundSchema;
  /** @deprecated use `Contact$outboundSchema` instead. */
  export const outboundSchema = Contact$outboundSchema;
  /** @deprecated use `Contact$Outbound` instead. */
  export type Outbound = Contact$Outbound;
}

export function contactToJSON(contact: Contact): string {
  return JSON.stringify(Contact$outboundSchema.parse(contact));
}

export function contactFromJSON(
  jsonString: string,
): SafeParseResult<Contact, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contact$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contact' from JSON`,
  );
}
