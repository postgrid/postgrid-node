/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contactsCreate } from "../../funcs/contactsCreate.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.ContactCreate$inboundSchema,
};

export const tool$contactsCreate: ToolDefinition<typeof args> = {
  name: "contacts-create",
  description: `Create Contact

Creates a contact. This will also verify the contact's address **if you create it using a live API key**. To sucessfully create a contact, either a \`firstName\`, a \`companyName\`, or both are required. You can supply both, but you **cannot** supply neither.

You have the option to supply the entire address (except for \`countryCode\`) via \`addressLine1\`, in which case PostGrid will parse it automatically. However, this is **not guaranteed to be correct**, so we recommend passing along the structured address fields (\`city\`, \`provinceOrState\`, etc) if you have them.

_Note that if you create a contact that has identical information to another contact, this will simply update the description of the existing contact and return it. This avoids creating duplicate contacts._`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await contactsCreate(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
